// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// NotificationService is an autogenerated mock type for the NotificationService type
type NotificationService struct {
	mock.Mock
}

type NotificationService_Expecter struct {
	mock *mock.Mock
}

func (_m *NotificationService) EXPECT() *NotificationService_Expecter {
	return &NotificationService_Expecter{mock: &_m.Mock}
}

// RemoveIdempotencies provides a mock function with given fields: ctx, TTL
func (_m *NotificationService) RemoveIdempotencies(ctx context.Context, TTL time.Duration) error {
	ret := _m.Called(ctx, TTL)

	if len(ret) == 0 {
		panic("no return value specified for RemoveIdempotencies")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) error); ok {
		r0 = rf(ctx, TTL)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NotificationService_RemoveIdempotencies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveIdempotencies'
type NotificationService_RemoveIdempotencies_Call struct {
	*mock.Call
}

// RemoveIdempotencies is a helper method to define mock.On call
//   - ctx context.Context
//   - TTL time.Duration
func (_e *NotificationService_Expecter) RemoveIdempotencies(ctx interface{}, TTL interface{}) *NotificationService_RemoveIdempotencies_Call {
	return &NotificationService_RemoveIdempotencies_Call{Call: _e.mock.On("RemoveIdempotencies", ctx, TTL)}
}

func (_c *NotificationService_RemoveIdempotencies_Call) Run(run func(ctx context.Context, TTL time.Duration)) *NotificationService_RemoveIdempotencies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Duration))
	})
	return _c
}

func (_c *NotificationService_RemoveIdempotencies_Call) Return(_a0 error) *NotificationService_RemoveIdempotencies_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NotificationService_RemoveIdempotencies_Call) RunAndReturn(run func(context.Context, time.Duration) error) *NotificationService_RemoveIdempotencies_Call {
	_c.Call.Return(run)
	return _c
}

// NewNotificationService creates a new instance of NotificationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotificationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *NotificationService {
	mock := &NotificationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
