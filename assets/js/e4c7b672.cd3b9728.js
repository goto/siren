(self.webpackChunksiren=self.webpackChunksiren||[]).push([[690],{1410:(e,t,r)=>{const a=r(7694),o=r(3618);e.exports={title:"Siren",tagline:"Universal data observability toolkit",url:"https://odpf.github.io",baseUrl:"/siren/",onBrokenLinks:"throw",onBrokenMarkdownLinks:"warn",favicon:"img/favicon.ico",organizationName:"odpf",projectName:"siren",customFields:{apiVersion:"v1beta1",defaultHost:"http://localhost:8080"},presets:[["@docusaurus/preset-classic",{docs:{sidebarPath:6679,editUrl:"https://github.com/odpf/siren/edit/master/docs/",sidebarCollapsed:!0,breadcrumbs:!1},blog:!1,theme:{customCss:[5308,2295]},gtag:{trackingID:"G-EPXDLH6V72"}}]],themeConfig:{colorMode:{defaultMode:"light",respectPrefersColorScheme:!0},navbar:{title:"Siren",logo:{src:"img/logo.svg"},hideOnScroll:!0,items:[{type:"doc",docId:"introduction",position:"right",label:"Docs"},{to:"docs/support",label:"Support",position:"right"},{href:"https://bit.ly/2RzPbtn",position:"right",className:"header-slack-link"},{href:"https://github.com/odpf/siren",className:"navbar-item-github",position:"right"}]},footer:{style:"light",links:[]},prism:{theme:a,darkTheme:o},announcementBar:{id:"star-repo",content:'\u2b50\ufe0f If you like Siren, give it a star on <a target="_blank" rel="noopener noreferrer" href="https://github.com/odpf/siren">GitHub</a>! \u2b50',backgroundColor:"#222",textColor:"#eee",isCloseable:!0}}}},5162:(e,t,r)=>{"use strict";r.d(t,{Z:()=>i});var a=r(7294),o=r(4334);const n="tabItem_Ymn6";function i(e){let{children:t,hidden:r,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(n,i),hidden:r},t)}},5488:(e,t,r)=>{"use strict";r.d(t,{Z:()=>m});var a=r(3117),o=r(7294),n=r(4334),i=r(2389),s=r(7392),l=r(7094),c=r(2466);const u="tabList__CuJ",p="tabItem_LNqP";function d(e){var t;const{lazy:r,block:i,defaultValue:d,values:m,groupId:g,className:h}=e,b=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=m??b.map((e=>{let{props:{value:t,label:r,attributes:a}}=e;return{value:t,label:r,attributes:a}})),y=(0,s.l)(f,((e,t)=>e.value===t.value));if(y.length>0)throw new Error(`Docusaurus error: Duplicate values "${y.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===d?d:d??(null==(t=b.find((e=>e.props.default)))?void 0:t.props.value)??b[0].props.value;if(null!==v&&!f.some((e=>e.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:k,setTabGroupChoices:w}=(0,l.U)(),[_,C]=(0,o.useState)(v),N=[],{blockElementScrollPositionUntilNextRender:A}=(0,c.o5)();if(null!=g){const e=k[g];null!=e&&e!==_&&f.some((t=>t.value===e))&&C(e)}const T=e=>{const t=e.currentTarget,r=N.indexOf(t),a=f[r].value;a!==_&&(A(t),C(a),null!=g&&w(g,String(a)))},x=e=>{var t;let r=null;switch(e.key){case"Enter":T(e);break;case"ArrowRight":{const t=N.indexOf(e.currentTarget)+1;r=N[t]??N[0];break}case"ArrowLeft":{const t=N.indexOf(e.currentTarget)-1;r=N[t]??N[N.length-1];break}}null==(t=r)||t.focus()};return o.createElement("div",{className:(0,n.Z)("tabs-container",u)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,n.Z)("tabs",{"tabs--block":i},h)},f.map((e=>{let{value:t,label:r,attributes:i}=e;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:_===t?0:-1,"aria-selected":_===t,key:t,ref:e=>N.push(e),onKeyDown:x,onClick:T},i,{className:(0,n.Z)("tabs__item",p,null==i?void 0:i.className,{"tabs__item--active":_===t})}),r??t)}))),r?(0,o.cloneElement)(b.filter((e=>e.props.value===_))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},b.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==_})))))}function m(e){const t=(0,i.Z)();return o.createElement(d,(0,a.Z)({key:String(t)},e))}},6679:e=>{e.exports={docsSidebar:["introduction","installation",{type:"category",label:"Tour",items:["tour/overview","tour/start_server","tour/registering_provider","tour/registering_receivers","tour/sending_notifications_to_receiver","tour/configuring_provider_alerting_rules","tour/subscribing_notifications"]},{type:"category",label:"Concepts",items:["concepts/overview","concepts/plugin","concepts/schema"]},{type:"category",label:"Guides",items:["guides/overview","guides/provider_and_namespace","guides/receiver","guides/subscription","guides/rule","guides/template","guides/alert_history","guides/notification","guides/deployment"]},{type:"category",label:"Contribute",items:["contribute/contribution","contribute/receiver","contribute/provider","contribute/release"]},{type:"category",label:"Reference",items:["reference/api","reference/server_configuration","reference/client_configuration","reference/receiver","reference/cli"]}]}},7508:(e,t,r)=>{"use strict";r.r(t),r.d(t,{apiVersion:()=>h,assets:()=>m,contentTitle:()=>p,default:()=>y,defaultHost:()=>b,frontMatter:()=>u,metadata:()=>d,toc:()=>g});var a=r(3117),o=(r(7294),r(3905)),n=r(5488),i=r(5162),s=r(6066),l=r(1410),c=r.n(l);const u={},p="Alert History",d={unversionedId:"guides/alert_history",id:"guides/alert_history",title:"Alert History",description:"Siren can store the alerts triggered by provider e.g. Cortex Alertmanager. Provider needs to be configured to call Siren API using a webhook.",source:"@site/docs/guides/alert_history.md",sourceDirName:"guides",slug:"/guides/alert_history",permalink:"/siren/docs/guides/alert_history",draft:!1,editUrl:"https://github.com/odpf/siren/edit/master/docs/docs/guides/alert_history.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Template",permalink:"/siren/docs/guides/template"},next:{title:"Notification",permalink:"/siren/docs/guides/notification"}},m={},g=[{value:"Cortex Alertmanager",id:"cortex-alertmanager",level:2},{value:"Alert History Creation via API",id:"alert-history-creation-via-api",level:3}],h=c().customFields.apiVersion,b=c().customFields.defaultHost,f={toc:g,apiVersion:h};function y(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,a.Z)({},f,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"alert-history"},"Alert History"),(0,o.kt)("p",null,"Siren can store the alerts triggered by provider e.g. Cortex Alertmanager. Provider needs to be configured to call Siren API using a webhook."),(0,o.kt)("h2",{id:"cortex-alertmanager"},"Cortex Alertmanager"),(0,o.kt)("p",null,"For Cortex Alertmanager, everytime a provider is added, a default ",(0,o.kt)("a",{parentName:"p",href:"https://prometheus.io/docs/alerting/latest/configuration/#webhook_config"},"webhook_config")," receiver with empty route condition is set, which will result in calling the defined Siren API's on all alerts. This sync also happens everytime the server started."),(0,o.kt)("p",null,"Example Cortex Alertmanager config"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"receivers:\n  - name: default\n    webhook_configs:\n      - send_resolved: true\n        http_config:\n          follow_redirects: true\n        url: http://localhost:8080/v1beta1/alerts/cortex/3 # siren API\n        max_alerts: 0\n")),(0,o.kt)("p",null,"Note that the url has ",(0,o.kt)("inlineCode",{parentName:"p"},"cortex/3")," at the end, which means this will be able to parse alert history payloads from cortex type and store in DB by making it belong to provider id ",(0,o.kt)("inlineCode",{parentName:"p"},"3"),". After this, as soon as any alert is triggered, it will be sent to Siren for history and a notification will also be published."),(0,o.kt)("p",null,"All information on triggered alerts depend on the alerting rule configured in Siren (synced to Cortex Ruler). Main information that should exist in the rule are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Which alert was triggered"),(0,o.kt)("li",{parentName:"ul"},"Which resource this alert refers to"),(0,o.kt)("li",{parentName:"ul"},"On which metric, this alert was triggered"),(0,o.kt)("li",{parentName:"ul"},"What was the metric value for alert trigger"),(0,o.kt)("li",{parentName:"ul"},"What was the severity of alert (CRITICAL, WARNING or RESOLVED)")),(0,o.kt)("p",null,"For reusability, rule in siren need to be defined based on a ",(0,o.kt)("a",{parentName:"p",href:"/siren/docs/guides/template"},"template"),". Template's body describes what data that is rendered once the variable is applied."),(0,o.kt)("p",null,"An Example of rule's template:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v2\ntype: template\nname: CPU\nbody:\n  - alert: CPUWarning\n    expr: avg by (host) (cpu_usage_user{cpu="cpu-total"}) > [[.warning]]\n    for: "[[.for]]"\n    labels:\n      severity: WARNING\n    annotations:\n      description: CPU has been above [[.warning]] for last [[.for]] {{ $labels.host }}\n      resource: { { $labels.instance } }\n      template: CPU\n      metricName: cpu_usage_user\n      metricValue: { { $labels.cpu_usage_user } }\n  - alert: CPUCritical\n    expr: avg by (host) (cpu_usage_user{cpu="cpu-total"}) > [[.critical]]\n    for: "[[.for]]"\n    labels:\n      severity: CRITICAL\n    annotations:\n      description: CPU has been above [[.critical]] for last [[.for]] {{ $labels.host }}\n      resource: { { $labels.instance } }\n      template: CPU\n      metricName: cpu_usage_user\n      metricValue: { { $labels.cpu_usage_user } }\nvariables:\n  - name: for\n    type: string\n    default: 10m\n    description: For eg 5m, 2h; Golang duration format\n  - name: warning\n    type: int\n    default: 80\n  - name: critical\n    type: int\n    default: 90\ntags:\n  - systems\n')),(0,o.kt)("p",null,"Please note that, the mandatory keys, in order to successfully store Alert History of Cortex Alertmanager provider is,"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"labels:\n  severity: CRITICAL\nannotations:\n  resource: { { $labels.instance } }\n  template: CPU\n  metricName: cpu_usage_user\n  metricValue: { { $labels.cpu_usage_user } }\n")),(0,o.kt)("p",null,"The keys are pretty obvious to match with what was described in bullets points in the introduction above. The above annotations and labels will be parsed by Siren APIs to be stored in the database and would affect the content of notification message."),(0,o.kt)("h3",{id:"alert-history-creation-via-api"},"Alert History Creation via API"),(0,o.kt)(n.Z,{groupId:"api",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"http",label:"HTTP",mdxType:"TabItem"},(0,o.kt)(s.Z,{className:"language-bash",mdxType:"CodeBlock"},"$ curl --request POST\n  --url ",b,"/",h,'/alerts/cortex/1\n  --header \'content-type: application/json\'\n  --data-raw \'{\n    "alerts": [\n        {\n            "status": "firing",\n            "labels": {\n                "severity": "CRITICAL"\n            },\n            "annotations": {\n                "resource": "apolloVM",\n                "template": "CPU",\n                "metricName": "cpu_usage_user",\n                "metricValue": "90"\n            }\n        }\n    ]\n}\''))),(0,o.kt)("p",null,"The request body of Alertmanager POST call to configured webhook looks something like (after you have followed the labels and annotations in the templates) the above snippet. The contract complies with Cortex Alertmanager ",(0,o.kt)("a",{parentName:"p",href:"https://prometheus.io/docs/alerting/latest/configuration/#webhook_config"},"webhook_config")," body. Siren's alerts API will parse the above payload and also store in the database, which you can fetch via the GET APIs with proper filters of startTime, endTime. See the swagger file for more details."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Alert Notification Payload Template")),(0,o.kt)("p",null,"For each receiver, Siren has a default notification payload template to render Cortex alert notification. See ",(0,o.kt)("a",{parentName:"p",href:"/siren/docs/guides/notification#message-payload-format"},"notification"),"."))}y.isMDXComponent=!0},3618:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>a});const a={plain:{color:"#F8F8F2",backgroundColor:"#282A36"},styles:[{types:["prolog","constant","builtin"],style:{color:"rgb(189, 147, 249)"}},{types:["inserted","function"],style:{color:"rgb(80, 250, 123)"}},{types:["deleted"],style:{color:"rgb(255, 85, 85)"}},{types:["changed"],style:{color:"rgb(255, 184, 108)"}},{types:["punctuation","symbol"],style:{color:"rgb(248, 248, 242)"}},{types:["string","char","tag","selector"],style:{color:"rgb(255, 121, 198)"}},{types:["keyword","variable"],style:{color:"rgb(189, 147, 249)",fontStyle:"italic"}},{types:["comment"],style:{color:"rgb(98, 114, 164)"}},{types:["attr-name"],style:{color:"rgb(241, 250, 140)"}}]}},7694:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>a});const a={plain:{color:"#393A34",backgroundColor:"#f6f8fa"},styles:[{types:["comment","prolog","doctype","cdata"],style:{color:"#999988",fontStyle:"italic"}},{types:["namespace"],style:{opacity:.7}},{types:["string","attr-value"],style:{color:"#e3116c"}},{types:["punctuation","operator"],style:{color:"#393A34"}},{types:["entity","url","symbol","number","boolean","variable","constant","property","regex","inserted"],style:{color:"#36acaa"}},{types:["atrule","keyword","attr-name","selector"],style:{color:"#00a4db"}},{types:["function","deleted","tag"],style:{color:"#d73a49"}},{types:["function-variable"],style:{color:"#6f42c1"}},{types:["tag","selector","keyword"],style:{color:"#00009f"}}]}}}]);