"use strict";(self.webpackChunksiren=self.webpackChunksiren||[]).push([[5885],{39008:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>g,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var a=t(58168),r=(t(96540),t(15680));const i={},l="Server Configuration",o={unversionedId:"reference/server_configuration",id:"reference/server_configuration",title:"Server Configuration",description:"Server configuration in siren is required to configure server, workers, and jobs. We can generate the default configuration with Siren CLI.",source:"@site/docs/reference/server_configuration.md",sourceDirName:"reference",slug:"/reference/server_configuration",permalink:"/siren/docs/reference/server_configuration",draft:!1,editUrl:"https://github.com/goto/siren/edit/master/docs/docs/reference/server_configuration.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"render a template",permalink:"/siren/docs/apis/siren-service-render-template"},next:{title:"Client Configuration",permalink:"/siren/docs/reference/client_configuration"}},s={},u=[{value:"How to configure",id:"how-to-configure",level:2},{value:"Using env variables",id:"using-env-variables",level:3},{value:"Using a yaml file",id:"using-a-yaml-file",level:3},{value:"Using a combination of both",id:"using-a-combination-of-both",level:3}],d={toc:u},c="wrapper";function g(e){let{components:n,...t}=e;return(0,r.yg)(c,(0,a.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"server-configuration"},"Server Configuration"),(0,r.yg)("p",null,"Server configuration in siren is required to configure server, workers, and jobs. We can generate the default configuration with Siren CLI."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"siren server init\n")),(0,r.yg)("p",null,"Above command will generate a ",(0,r.yg)("inlineCode",{parentName:"p"},"./config.yaml")," file in the same folder. When starting the server, Siren server will auto detect the ",(0,r.yg)("inlineCode",{parentName:"p"},"./config.yaml")," and read all configs inside it to be used when starting up the server. Below is the Siren server configuration."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},'db:\n  driver: <string>\n\n  url: <string>\n\n  max_idle_conns: <int>\n\n  max_open_conns: <int>\n\n  # db connection max life time config e.g. 10ms\n  conn_max_life_time: <string duration> | default="10ms"\n  \n  # db connection max query timeout config e.g. 100ms\n  max_query_timeout: <string duration> | default="100ms"\n\n# instrumentation/metrics related configurations.\ntelemetry:\n  # debug_addr is used for exposing the pprof, zpages & `/metrics` endpoints. if\n  # not set, all of the above are disabled.\n  debug_addr: <string> | default="localhost:8081"\n\n  # enable_cpu enables collection of runtime CPU metrics. available in `/metrics`.\n  enable_cpu: <bool> | default=true\n\n  # enable_memory enables collection of runtime memory metrics. available via `/metrics`.\n  enable_memory: <bool> | default=true\n\n  # sampling_fraction indicates the sampling rate for tracing. 1 indicates all traces\n  # are collected and 0 means no traces.\n  sampling_fraction: <bool> | default=1\n\n  # service_name is the identifier used in trace exports, NewRelic, etc for the\n  # siren instance.\n  service_name: <string> | default="siren"\n\n  # enable_newrelic enables exporting NewRelic instrumentation in addition to the\n  # OpenCensus.\n  enable_newrelic: <bool> | default=false\n\n  # newrelic_api_key must be a valid NewRelic License key.\n  newrelic_api_key: <string> | default="____LICENSE_STRING_OF_40_CHARACTERS_____"\n\n  # enable_otel_agent enables the OpenTelemetry Exporter for both traces and views.\n  enable_otel_agent: <bool> | default=false\n\n  # otel_agent_addr is the addr of OpenTelemetry Collector/Agent. This is where the\n  # opene-telemetry exporter will publish the collected traces/views to.\n  otel_agent_addr: <string> | default="localhost:55678"\n\nservice:\n  host: <string> | default="localhost"\n\n  port: <int> | default=8080\n  \n  encryption_key: <string> | default="_ENCRYPTIONKEY_OF_32_CHARACTERS_"\n\n  api_headers:\n\n    idempotency_key: <string> | default="Idempotency-Key"\n  \nlog:\n  level: <string> | default="info"\n\n  # log format will be compatible with gcp logging if this is set to true\n  gcp_compatible: <bool> | default=true\n\nproviders:\n  cortex:\n    group_wait: <string> | default="30s"\n\n    webhook_base_api: <string> | default="http://localhost:8080/v1beta1/alerts/cortex"\n\n    http_client:\n      <httpclient>\n\nreceivers:\n  slack:\n    # host of slack api, default value is hardcoded as `https://slack.com/api`\n    apihost: <string> | default=""\n    \n    retry:\n      <retry>\n      \n    httpclient:\n      <httpclient>\n\n  pagerduty:\n    # host of pagerduty api, default value is hardcoded as `https://events.pagerduty.com`\n    api_host: <string> | default=""\n\n    retry:\n      <retry>\n      \n    httpclient:\n      <httpclient>\n      \n  http:\n    retry:\n      <retry>\n      \n    httpclient:\n      <httpclient>\n\nnotification:\n  queue:\n    # queue to use (supported are: inmemory, postgres)\n    kind: <string> | default="inmemory"\n\n  message_handler:\n    <message_handler>\n\n  dlq_handler:\n    <message_handler>\n')),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"<retry>")," block above could be represented like below."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},'retry:\n    # duration to wait before retrying a call to api\n    wait_duration: <string duration> | default="20ms"\n    \n    enable_backoff: <bool> | default=false\n\n    # number of trial the client does the work (e.g. api call)\n    max_tries: 3\n\n    # won\'t retry the call if there is a failure if enable is false\n    enable: <bool> | default=true\n')),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"<httpclient>")," block above could be represented like below."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},"httpclient:\n    # if set to 0, will use the default value from net/http library DefaultTransport: 30000\n    timeout_ms: <int> | default=0\n\n    # if set to 0, will use the default value from net/http library: 0 means no limit\n    max_conns_per_host: <int> | default=0\n\n    # if set to 0, will use the default value from net/http library DefaultTransport: 100\n    max_idle_conns: <int> | default=0\n\n    # if set to 0, will use the default value from net/http library: 2\n    max_idle_conns_per_host: <int> | default=0\n\n    # if set to 0, will use the default value from net/http library DefaultTransport: 90000\n    idle_conn_timeout_ms: <int> | default=0\n")),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"<message_handler>")," block above could be represented like below."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},'message_handler:\n    # disable message handler worker if `enabled` is false\n    enabled: <bool> | default=true\n\n    # duration to dequeue and publish messages\n    poll_duration: <string duration> | default="5s"\n\n    # types of receiver that need to be supported by the handler (e.g. slack, http, pagerduty, file)\n    receiver_types: <list of string> | default="[slack, http, pagerduty, file]"\\\n\n    # number of messages to dequeue and publish at once\n    batch_size: <int> | default=1\n')),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Convert YAML to Environment Variable"),"\nIf you prefer to use env variable instead of a yaml file. You could also represent the config in the env variable. Each alphanumeric character in config need to be uppercased and the nested config is merged into a single word separated by an underscore ",(0,r.yg)("inlineCode",{parentName:"p"},"_"),". This is similar like what ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/spf13/viper"},"viper")," does."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Example")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},"# yaml config\ndb:\n  driver: postgres\n  url: postgres://postgres:@localhost:5432/siren_development?sslmode=disable\nnewrelic:\n  license: ____LICENSE_STRING_OF_40_CHARACTERS_____\nservice:\n  port: 8080\n  encryption_key: _ENCRYPTIONKEY_OF_32_CHARACTERS_\n")),(0,r.yg)("p",null,"The environment variable will be like this."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"DB_DRIVER=postgres\nDB_URL=postgres://postgres:@localhost:5432/siren_development?sslmode=disable\nNEWRELIC_LICENSE=____LICENSE_STRING_OF_40_CHARACTERS_____\nSERVICE_PORT=8080\nSERVICE_ENCRYPTION_KEY=_ENCRYPTIONKEY_OF_32_CHARACTERS_\n")),(0,r.yg)("h2",{id:"how-to-configure"},"How to configure"),(0,r.yg)("p",null,"There are 3 ways to configure siren:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Using env variables"),(0,r.yg)("li",{parentName:"ul"},"Using a yaml file"),(0,r.yg)("li",{parentName:"ul"},"or using a combination of both")),(0,r.yg)("h3",{id:"using-env-variables"},"Using env variables"),(0,r.yg)("p",null,"Example:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sh"},"export PORT=9999\nsiren server start\n")),(0,r.yg)("p",null,"This will run the service on port 9999 instead of the default 8080"),(0,r.yg)("h3",{id:"using-a-yaml-file"},"Using a yaml file"),(0,r.yg)("p",null,"For default values and the structure of the yaml file, generate yaml config file with:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"siren server init\n")),(0,r.yg)("p",null,"This will generate a ",(0,r.yg)("inlineCode",{parentName:"p"},"./config.yaml")," file. Now you can make modification to the config yaml as you wish and then start Siren server."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sh"},"siren server start\n")),(0,r.yg)("h3",{id:"using-a-combination-of-both"},"Using a combination of both"),(0,r.yg)("p",null,"If any key that is set via both env vars and yaml the value set in env vars will take effect."))}g.isMDXComponent=!0}}]);