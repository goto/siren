"use strict";(self.webpackChunksiren=self.webpackChunksiren||[]).push([[2784],{3601:function(e,n,i){i.r(n),i.d(n,{frontMatter:function(){return c},contentTitle:function(){return f},metadata:function(){return l},toc:function(){return s},default:function(){return p}});var t=i(7462),r=i(3366),o=(i(7294),i(3905)),a=["components"],c={},f="Add a New Receiver Plugin",l={unversionedId:"contribute/receiver",id:"contribute/receiver",isDocsHomePage:!1,title:"Add a New Receiver Plugin",description:"More details about the concept of receiver plugin can be found here. In this part, we will show hot to add a new receiver plugin to write notifications to a file.",source:"@site/docs/contribute/receiver.md",sourceDirName:"contribute",slug:"/contribute/receiver",permalink:"/siren/docs/contribute/receiver",editUrl:"https://github.com/odpf/siren/edit/master/docs/docs/contribute/receiver.md",tags:[],version:"current",lastUpdatedBy:"Ravi Suhag",lastUpdatedAt:1666359878,formattedLastUpdatedAt:"10/21/2022",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Contribution Process",permalink:"/siren/docs/contribute/contribution"},next:{title:"Add a New Provider Plugin",permalink:"/siren/docs/contribute/provider"}},s=[{value:"Defining Configs",id:"defining-configs",children:[]},{value:"Implement ConfigResolver",id:"implement-configresolver",children:[]},{value:"Implement Notifier",id:"implement-notifier",children:[]},{value:"Integrate New Plugin with Siren",id:"integrate-new-plugin-with-siren",children:[]}],d={toc:s};function p(e){var n=e.components,i=(0,r.Z)(e,a);return(0,o.kt)("wrapper",(0,t.Z)({},d,i,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"add-a-new-receiver-plugin"},"Add a New Receiver Plugin"),(0,o.kt)("p",null,"More details about the concept of receiver plugin can be found ",(0,o.kt)("a",{parentName:"p",href:"/siren/docs/concepts/plugin#receiver"},"here"),". In this part, we will show hot to add a new receiver plugin to write notifications to a ",(0,o.kt)("inlineCode",{parentName:"p"},"file"),"."),(0,o.kt)("h2",{id:"defining-configs"},"Defining Configs"),(0,o.kt)("p",null,"To write a file, we need a ",(0,o.kt)("inlineCode",{parentName:"p"},"url")," of the file. This might be the only config that we needs. We also don't need to define ",(0,o.kt)("inlineCode",{parentName:"p"},"SubscriptionConfig")," since we don't need a specific config for the subscription."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type ReceiverConfig struct {\n    URL string `mapstructure:"url"`\n}\n')),(0,o.kt)("p",null,"We define a ",(0,o.kt)("inlineCode",{parentName:"p"},"NotificationConfig")," which only embeds ",(0,o.kt)("inlineCode",{parentName:"p"},"ReceiverConfig"),". This is helpful to separate the concern for a specific use-cases in some plugins."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type NotificationConfig struct {\n    ReceiverConfig `mapstructure:",squash"`\n}\n')),(0,o.kt)("p",null,"For ",(0,o.kt)("inlineCode",{parentName:"p"},"file")," type, we don't need an ",(0,o.kt)("inlineCode",{parentName:"p"},"AppConfig")," as for now. So we don't need to add one in ",(0,o.kt)("inlineCode",{parentName:"p"},"plugins/receivers/config.go"),"."),(0,o.kt)("p",null,"Now that we already have defined all configs needed, we needs to implement all interfaces needed by defining a new ",(0,o.kt)("inlineCode",{parentName:"p"},"ReceiverService")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"NotificationService"),"."),(0,o.kt)("h2",{id:"implement-configresolver"},"Implement ConfigResolver"),(0,o.kt)("p",null,"We need to create a new ",(0,o.kt)("inlineCode",{parentName:"p"},"ReceiverService")," and implement ",(0,o.kt)("inlineCode",{parentName:"p"},"ConfigResolver"),". For ",(0,o.kt)("inlineCode",{parentName:"p"},"file")," receiver, we don't need to do transformation of configs before and after writing and reading from the DB. Therefore, we only needs to implement two ",(0,o.kt)("inlineCode",{parentName:"p"},"ConfigResolver")," methods: ",(0,o.kt)("inlineCode",{parentName:"p"},"PreHookTransformConfigs")," to validate the config before storing it to the DB and ",(0,o.kt)("inlineCode",{parentName:"p"},"BuildNotificationConfig")," to merge ",(0,o.kt)("inlineCode",{parentName:"p"},"ReceiverConfig")," into a ",(0,o.kt)("inlineCode",{parentName:"p"},"NotificationConfig"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type ReceiverService struct {\n    base.UnimplementedReceiverService\n}\n\nfunc NewReceiverService() *ReceiverService {\n    return &ReceiverService{}\n}\n\nfunc (s *ReceiverService) PreHookTransformConfigs(ctx context.Context, configurations map[string]interface{}) (map[string]interface{}, error) {\n    receiverConfig := &ReceiverConfig{}\n    if err := mapstructure.Decode(configurations, receiverConfig); err != nil {\n        return nil, fmt.Errorf("failed to transform configurations to receiver config: %w", err)\n    }\n\n    if err := receiverConfig.Validate(); err != nil {\n        return nil, errors.ErrInvalid.WithMsgf(err.Error())\n    }\n\n    return configurations, nil\n}\n\nfunc (s *ReceiverService) BuildNotificationConfig(subsConfs map[string]interface{}, receiverConfs map[string]interface{}) (map[string]interface{}, error) {\n    receiverConfig := &ReceiverConfig{}\n    if err := mapstructure.Decode(receiverConfs, receiverConfig); err != nil {\n        return nil, fmt.Errorf("failed to transform configurations to receiver config: %w", err)\n    }\n\n    notificationConfig := NotificationConfig{\n        ReceiverConfig: *receiverConfig,\n    }\n\n    return notificationConfig.AsMap(), nil\n}\n')),(0,o.kt)("h2",{id:"implement-notifier"},"Implement Notifier"),(0,o.kt)("p",null,"We need to create a new ",(0,o.kt)("inlineCode",{parentName:"p"},"NotificationService")," and implement ",(0,o.kt)("inlineCode",{parentName:"p"},"Notifier"),". For ",(0,o.kt)("inlineCode",{parentName:"p"},"file")," receiver, we don't need to do transformation of configs before and after enqueue and dequeue. Therefore, we only needs to implement two ",(0,o.kt)("inlineCode",{parentName:"p"},"Notifier")," methods: ",(0,o.kt)("inlineCode",{parentName:"p"},"PreHookTransformConfigs")," to validate the config before enqueuing notification message and ",(0,o.kt)("inlineCode",{parentName:"p"},"Publish")," to send notifications (to write notifications to a file under ",(0,o.kt)("inlineCode",{parentName:"p"},"url"),")."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type NotificationService struct {\n    base.UnimplementedNotificationService\n}\n\nfunc NewNotificationService() *NotificationService {\n    return &NotificationService{}\n}\n\nfunc (s *NotificationService) Publish(ctx context.Context, notificationMessage notification.Message) (bool, error) {\n    notificationConfig := &NotificationConfig{}\n    if err := mapstructure.Decode(notificationMessage.Configs, notificationConfig); err != nil {\n        return false, err\n    }\n\n    bodyBytes, err := json.Marshal(notificationMessage.Details)\n    if err != nil {\n        return false, err\n    }\n    if err := s.validateFilePath(notificationConfig.URL); err != nil {\n        return false, err\n    }\n\n    fileInstance, err := os.OpenFile(notificationConfig.URL, os.O_RDWR|os.O_CREATE|os.O_APPEND, 0777)\n    if err != nil {\n        return false, err\n    }\n\n    byteNewLine := []byte("\\n")\n    bodyBytes = append(bodyBytes, byteNewLine...)\n    _, err = fileInstance.Write(bodyBytes)\n    if err != nil {\n        return false, err\n    }\n\n    return false, nil\n}\n\n\nfunc (s *NotificationService) PreHookTransformConfigs(ctx context.Context, notificationConfigMap map[string]interface{}) (map[string]interface{}, error) {\n    notificationConfig := &NotificationConfig{}\n    if err := mapstructure.Decode(notificationConfigMap, notificationConfig); err != nil {\n        return nil, err\n    }\n\n    if err := notificationConfig.Validate(); err != nil {\n        return nil, err\n    }\n\n    return notificationConfig.AsMap(), nil\n}\n')),(0,o.kt)("h2",{id:"integrate-new-plugin-with-siren"},"Integrate New Plugin with Siren"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Define and add your new type of plugin called ",(0,o.kt)("inlineCode",{parentName:"li"},"file")," inside ",(0,o.kt)("inlineCode",{parentName:"li"},"core/receivers/type.go"),"."),(0,o.kt)("li",{parentName:"ol"},"Initialize your plugin receiver service and notification service and add to the ",(0,o.kt)("inlineCode",{parentName:"li"},"ConfigResolver")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"Notifier")," registries map."),(0,o.kt)("li",{parentName:"ol"},"To make sure notification handler and dlq handler process your new type, don't forget to add your new receiver type in notification message & dlq handler config or make it default to support all receiver types.")))}p.isMDXComponent=!0}}]);