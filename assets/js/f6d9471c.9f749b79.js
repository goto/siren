"use strict";(self.webpackChunksiren=self.webpackChunksiren||[]).push([[655],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return d}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),f=u(t),d=a,m=f["".concat(s,".").concat(d)]||f[d]||p[d]||i;return t?r.createElement(m,l(l({ref:n},c),{},{components:t})):r.createElement(m,l({ref:n},c))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=f;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var u=2;u<i;u++)l[u]=t[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},9476:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return i},metadata:function(){return o},toc:function(){return u}});var r=t(3117),a=(t(7294),t(3905));const i={},l="Server Configuration",o={unversionedId:"reference/server_configuration",id:"reference/server_configuration",title:"Server Configuration",description:"Server configuration in siren is required to configure server, workers, and jobs. We can generate the default configuration with Siren CLI.",source:"@site/docs/reference/server_configuration.md",sourceDirName:"reference",slug:"/reference/server_configuration",permalink:"/siren/docs/reference/server_configuration",draft:!1,editUrl:"https://github.com/odpf/siren/edit/master/docs/docs/reference/server_configuration.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Siren APIs",permalink:"/siren/docs/reference/api"},next:{title:"Client Configuration",permalink:"/siren/docs/reference/client_configuration"}},s={},u=[{value:"How to configure",id:"how-to-configure",level:2},{value:"Using env variables",id:"using-env-variables",level:3},{value:"Using a yaml file",id:"using-a-yaml-file",level:3},{value:"Using a combination of both",id:"using-a-combination-of-both",level:3}],c={toc:u};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"server-configuration"},"Server Configuration"),(0,a.kt)("p",null,"Server configuration in siren is required to configure server, workers, and jobs. We can generate the default configuration with Siren CLI."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"siren server init\n")),(0,a.kt)("p",null,"Above command will generate a ",(0,a.kt)("inlineCode",{parentName:"p"},"./config.yaml")," file in the same folder. When starting the server, Siren server will auto detect the ",(0,a.kt)("inlineCode",{parentName:"p"},"./config.yaml")," and read all configs inside it to be used when starting up the server. Below is the Siren server configuration."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'db:\n  driver: <string>\n\n  url: <string>\n\n  max_idle_conns: <int>\n\n  max_open_conns: <int>\n\n  # db connection max life time config e.g. 10ms\n  conn_max_life_time: <string duration> | default="10ms"\n  \n  # db connection max query timeout config e.g. 100ms\n  max_query_timeout: <string duration> | default="100ms"\n\nnewrelic:\n  enabled: <string> | default = false\n  \n  appname: <string> | default = "siren"\n  \n  license: <string> | default = "____LICENSE_STRING_OF_40_CHARACTERS_____"\n\nservice:\n  host: <string> | default="localhost"\n\n  port: <int> | default=8080\n  \n  encryption_key: <string> | default="_ENCRYPTIONKEY_OF_32_CHARACTERS_"\n  \nlog:\n  level: <string> | default="info"\n\n  # log format will be compatible with gcp logging if this is set to true\n  gcp_compatible: <bool> | default=true\n\nreceivers:\n  slack:\n    # host of slack api, default value is hardcoded as `https://slack.com/api`\n    apihost: <string> | default=""\n    \n    retry:\n      <retry>\n      \n    httpclient:\n      <httpclient>\n\n  pagerduty:\n    # host of pagerduty api, default value is hardcoded as `https://events.pagerduty.com`\n    api_host: <string> | default=""\n\n    retry:\n      <retry>\n      \n    httpclient:\n      <httpclient>\n      \n  http:\n    retry:\n      <retry>\n      \n    httpclient:\n      <httpclient>\n\nnotification:\n  queue:\n    # queue to use (supported are: inmemory, postgres)\n    kind: <string> | default="inmemory"\n\n  message_handler:\n    <message_handler>\n\n  dlq_handler:\n    <message_handler>\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"<retry>")," block above could be represented like below."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'retry:\n    # duration to wait before retrying a call to api\n    wait_duration: <string duration> | default="20ms"\n    \n    enable_backoff: <bool> | default=false\n\n    # number of trial the client does the work (e.g. api call)\n    max_tries: 3\n\n    # won\'t retry the call if there is a failure if enable is false\n    enable: <bool> | default=true\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"<httpclient>")," block above could be represented like below."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"httpclient:\n    # if set to 0, will use the default value from net/http library DefaultTransport: 30000\n    timeout_ms: <int> | default=0\n\n    # if set to 0, will use the default value from net/http library: 0 means no limit\n    max_conns_per_host: <int> | default=0\n\n    # if set to 0, will use the default value from net/http library DefaultTransport: 100\n    max_idle_conns: <int> | default=0\n\n    # if set to 0, will use the default value from net/http library: 2\n    max_idle_conns_per_host: <int> | default=0\n\n    # if set to 0, will use the default value from net/http library DefaultTransport: 90000\n    idle_conn_timeout_ms: <int> | default=0\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"<message_handler>")," block above could be represented like below."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'message_handler:\n    # disable message handler worker if `enabled` is false\n    enabled: <bool> | default=true\n\n    # duration to dequeue and publish messages\n    poll_duration: <string duration> | default="5s"\n\n    # types of receiver that need to be supported by the handler (e.g. slack, http, pagerduty, file)\n    receiver_types: <list of string> | default="[slack, http, pagerduty, file]"\\\n\n    # number of messages to dequeue and publish at once\n    batch_size: <int> | default=1\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Convert YAML to Environment Variable"),"\nIf you prefer to use env variable instead of a yaml file. You could also represent the config in the env variable. Each alphanumeric character in config need to be uppercased and the nested config is merged into a single word separated by an underscore ",(0,a.kt)("inlineCode",{parentName:"p"},"_"),". This is similar like what ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/spf13/viper"},"viper")," does."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"# yaml config\ndb:\n  driver: postgres\n  url: postgres://postgres:@localhost:5432/siren_development?sslmode=disable\nnewrelic:\n  license: ____LICENSE_STRING_OF_40_CHARACTERS_____\nservice:\n  port: 8080\n  encryption_key: _ENCRYPTIONKEY_OF_32_CHARACTERS_\n")),(0,a.kt)("p",null,"The environment variable will be like this."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"DB_DRIVER=postgres\nDB_URL=postgres://postgres:@localhost:5432/siren_development?sslmode=disable\nNEWRELIC_LICENSE=____LICENSE_STRING_OF_40_CHARACTERS_____\nSERVICE_PORT=8080\nSERVICE_ENCRYPTION_KEY=_ENCRYPTIONKEY_OF_32_CHARACTERS_\n")),(0,a.kt)("h2",{id:"how-to-configure"},"How to configure"),(0,a.kt)("p",null,"There are 3 ways to configure siren:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Using env variables"),(0,a.kt)("li",{parentName:"ul"},"Using a yaml file"),(0,a.kt)("li",{parentName:"ul"},"or using a combination of both")),(0,a.kt)("h3",{id:"using-env-variables"},"Using env variables"),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"export PORT=9999\nsiren server start\n")),(0,a.kt)("p",null,"This will run the service on port 9999 instead of the default 8080"),(0,a.kt)("h3",{id:"using-a-yaml-file"},"Using a yaml file"),(0,a.kt)("p",null,"For default values and the structure of the yaml file, generate yaml config file with:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"siren server init\n")),(0,a.kt)("p",null,"This will generate a ",(0,a.kt)("inlineCode",{parentName:"p"},"./config.yaml")," file. Now you can make modification to the config yaml as you wish and then start Siren server."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"siren server start\n")),(0,a.kt)("h3",{id:"using-a-combination-of-both"},"Using a combination of both"),(0,a.kt)("p",null,"If any key that is set via both env vars and yaml the value set in env vars will take effect."))}p.isMDXComponent=!0}}]);