(self.webpackChunksiren=self.webpackChunksiren||[]).push([[8542],{73252:e=>{e.exports=[{type:"doc",id:"apis/siren-apis"},{type:"category",label:"Alert",link:{type:"generated-index",title:"Alert",slug:"/category/apis/alert"},items:[{type:"doc",id:"apis/siren-service-list-alerts",label:"list alerts",className:"api-method get"},{type:"doc",id:"apis/siren-service-create-alerts",label:"create alerts",className:"api-method post"},{type:"doc",id:"apis/siren-service-create-alerts-with-namespace",label:"create alerts with namespace",className:"api-method post"}]},{type:"category",label:"Notification",link:{type:"generated-index",title:"Notification",slug:"/category/apis/notification"},items:[{type:"doc",id:"apis/siren-service-post-bulk-notifications",label:"Post bulk event notifications",className:"api-method post"},{type:"doc",id:"apis/siren-service-list-notifications",label:"List notifications",className:"api-method get"},{type:"doc",id:"apis/siren-service-post-notification",label:"Post an event notification",className:"api-method post"},{type:"doc",id:"apis/siren-service-list-notification-messages",label:"List messages generated by notification",className:"api-method get"}]},{type:"category",label:"Namespace",link:{type:"generated-index",title:"Namespace",slug:"/category/apis/namespace"},items:[{type:"doc",id:"apis/siren-service-list-namespaces",label:"list namespaces",className:"api-method get"},{type:"doc",id:"apis/siren-service-create-namespace",label:"create a namespace",className:"api-method post"},{type:"doc",id:"apis/siren-service-get-namespace",label:"get a namespace",className:"api-method get"},{type:"doc",id:"apis/siren-service-delete-namespace",label:"delete a namespace",className:"api-method delete"},{type:"doc",id:"apis/siren-service-update-namespace",label:"update a namespace",className:"api-method put"}]},{type:"category",label:"Provider",link:{type:"generated-index",title:"Provider",slug:"/category/apis/provider"},items:[{type:"doc",id:"apis/siren-service-list-providers",label:"list providers",className:"api-method get"},{type:"doc",id:"apis/siren-service-create-provider",label:"create a provider",className:"api-method post"},{type:"doc",id:"apis/siren-service-get-provider",label:"get a provider",className:"api-method get"},{type:"doc",id:"apis/siren-service-delete-provider",label:"delete a provider",className:"api-method delete"},{type:"doc",id:"apis/siren-service-update-provider",label:"update a provider",className:"api-method put"}]},{type:"category",label:"Receiver",link:{type:"generated-index",title:"Receiver",slug:"/category/apis/receiver"},items:[{type:"doc",id:"apis/siren-service-list-receivers",label:"list receivers",className:"api-method get"},{type:"doc",id:"apis/siren-service-create-receiver",label:"create a receiver",className:"api-method post"},{type:"doc",id:"apis/siren-service-get-receiver",label:"get a receiver",className:"api-method get"},{type:"doc",id:"apis/siren-service-delete-receiver",label:"delete a receiver",className:"api-method delete"},{type:"doc",id:"apis/siren-service-update-receiver",label:"update a receiver",className:"api-method put"},{type:"doc",id:"apis/siren-service-notify-receiver",label:"send notification to receiver",className:"api-method post"}]},{type:"category",label:"Rule",link:{type:"generated-index",title:"Rule",slug:"/category/apis/rule"},items:[{type:"doc",id:"apis/siren-service-list-rules",label:"list rules",className:"api-method get"},{type:"doc",id:"apis/siren-service-update-rule",label:"add/update a rule",className:"api-method put"}]},{type:"category",label:"Silence",link:{type:"generated-index",title:"Silence",slug:"/category/apis/silence"},items:[{type:"doc",id:"apis/siren-service-list-silences",label:"get all silences",className:"api-method get"},{type:"doc",id:"apis/siren-service-create-silence",label:"create a silence",className:"api-method post"},{type:"doc",id:"apis/siren-service-get-silence",label:"get a silence",className:"api-method get"},{type:"doc",id:"apis/siren-service-expire-silence",label:"expire a silence",className:"api-method delete"}]},{type:"category",label:"Subscription",link:{type:"generated-index",title:"Subscription",slug:"/category/apis/subscription"},items:[{type:"doc",id:"apis/siren-service-list-subscriptions",label:"List subscriptions",className:"api-method get"},{type:"doc",id:"apis/siren-service-create-subscription",label:"Create a subscription",className:"api-method post"},{type:"doc",id:"apis/siren-service-get-subscription",label:"Get a subscription",className:"api-method get"},{type:"doc",id:"apis/siren-service-delete-subscription",label:"Delete a subscription",className:"api-method delete"},{type:"doc",id:"apis/siren-service-update-subscription",label:"Update a subscription",className:"api-method put"},{type:"doc",id:"apis/siren-service-list-subscription-receivers",label:"List receivers of a subscription",className:"api-method get"},{type:"doc",id:"apis/siren-service-add-subscription-receiver",label:"Add a receiver of a subscription",className:"api-method post"},{type:"doc",id:"apis/siren-service-delete-subscription-receiver",label:"Delete a receiver of a subscription",className:"api-method delete"},{type:"doc",id:"apis/siren-service-update-subscription-receiver",label:"Update a receiver of a subscription",className:"api-method put"}]},{type:"category",label:"Template",link:{type:"generated-index",title:"Template",slug:"/category/apis/template"},items:[{type:"doc",id:"apis/siren-service-list-templates",label:"list templates",className:"api-method get"},{type:"doc",id:"apis/siren-service-upsert-template",label:"add/update a template",className:"api-method put"},{type:"doc",id:"apis/siren-service-get-template",label:"get a template",className:"api-method get"},{type:"doc",id:"apis/siren-service-delete-template",label:"delete a template",className:"api-method delete"},{type:"doc",id:"apis/siren-service-render-template",label:"render a template",className:"api-method post"}]}]},89236:(e,t,a)=>{const i=a(45603),s=a(76062);e.exports={title:"Siren",tagline:"Universal data observability toolkit",url:"https://goto.github.io",baseUrl:"/siren/",onBrokenLinks:"throw",onBrokenMarkdownLinks:"warn",favicon:"img/favicon.ico",organizationName:"goto",projectName:"siren",customFields:{apiVersion:"v1beta1",defaultHost:"http://localhost:8080"},presets:[["@docusaurus/preset-classic",{docs:{sidebarPath:5469,editUrl:"https://github.com/goto/siren/edit/master/docs/",sidebarCollapsed:!0,breadcrumbs:!1,docLayoutComponent:"@theme/DocPage",docItemComponent:"@theme/ApiItem"},blog:!1,theme:{customCss:[37951,51043]},gtag:{trackingID:"G-EPXDLH6V72"}}]],plugins:[["docusaurus-plugin-openapi-docs",{id:"apiDocs",docsPluginId:"classic",config:{auth:{specPath:"../proto/siren.swagger.yaml",outputDir:"docs/apis",sidebarOptions:{groupPathsBy:"tag"},hideSendButton:!1}}}]],themes:["docusaurus-theme-openapi-docs"],themeConfig:{colorMode:{defaultMode:"light",respectPrefersColorScheme:!0},navbar:{title:"Siren",logo:{src:"img/logo.svg"},hideOnScroll:!0,items:[{type:"doc",docId:"introduction",position:"right",label:"Docs"},{to:"docs/support",label:"Support",position:"right"},{href:"https://bit.ly/2RzPbtn",position:"right",className:"header-slack-link"},{href:"https://github.com/goto/siren",className:"navbar-item-github",position:"right"}]},footer:{style:"light",links:[]},prism:{theme:i,darkTheme:s},announcementBar:{id:"star-repo",content:'\u2b50\ufe0f If you like Siren, give it a star on <a target="_blank" rel="noopener noreferrer" href="https://github.com/goto/siren">GitHub</a>! \u2b50',backgroundColor:"#222",textColor:"#eee",isCloseable:!0}}}},4865:(e,t,a)=>{"use strict";a.d(t,{A:()=>u});var i=a(58168),s=a(96540),r=a(20053),l=a(92303),n=a(31682),o=a(86976),c=a(23104);const p={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function d(e){const{lazy:t,block:a,defaultValue:l,values:d,groupId:u,className:m}=e,g=s.Children.map(e.children,(e=>{if((0,s.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),y=d??g.map((e=>{let{props:{value:t,label:a,attributes:i}}=e;return{value:t,label:a,attributes:i}})),b=(0,n.X)(y,((e,t)=>e.value===t.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const h=null===l?l:l??g.find((e=>e.props.default))?.props.value??g[0].props.value;if(null!==h&&!y.some((e=>e.value===h)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${h}" but none of its children has the corresponding value. Available values are: ${y.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:f}=(0,o.x)(),[N,k]=(0,s.useState)(h),w=[],{blockElementScrollPositionUntilNextRender:x}=(0,c.a_)();if(null!=u){const e=v[u];null!=e&&e!==N&&y.some((t=>t.value===e))&&k(e)}const T=e=>{const t=e.currentTarget,a=w.indexOf(t),i=y[a].value;i!==N&&(x(t),k(i),null!=u&&f(u,String(i)))},S=e=>{let t=null;switch(e.key){case"Enter":T(e);break;case"ArrowRight":{const a=w.indexOf(e.currentTarget)+1;t=w[a]??w[0];break}case"ArrowLeft":{const a=w.indexOf(e.currentTarget)-1;t=w[a]??w[w.length-1];break}}t?.focus()};return s.createElement("div",{className:(0,r.A)("tabs-container",p.tabList)},s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":a},m)},y.map((e=>{let{value:t,label:a,attributes:l}=e;return s.createElement("li",(0,i.A)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:e=>w.push(e),onKeyDown:S,onClick:T},l,{className:(0,r.A)("tabs__item",p.tabItem,l?.className,{"tabs__item--active":N===t})}),a??t)}))),t?(0,s.cloneElement)(g.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):s.createElement("div",{className:"margin-top--md"},g.map(((e,t)=>(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function u(e){const t=(0,l.A)();return s.createElement(d,(0,i.A)({key:String(t)},e))}},5469:(e,t,a)=>{e.exports={docsSidebar:["introduction","use_cases","installation",{type:"category",label:"Tour",items:["tour/introduction","tour/setup_server","tour/1sending_notifications_overview","tour/2alerting_rules_subscriptions_overview"]},{type:"category",label:"Concepts",items:["concepts/overview","concepts/plugin","concepts/notification","concepts/glossary"]},{type:"category",label:"Guides",items:["guides/overview","guides/deployment","guides/provider_and_namespace","guides/receiver","guides/subscription","guides/rule","guides/template","guides/alert_history","guides/notification","guides/workers","guides/job"]},{type:"category",label:"Providers",items:["providers/cortexmetrics"]},{type:"category",label:"Receivers",items:["receivers/slack","receivers/pagerduty","receivers/http","receivers/file"]},{type:"category",label:"APIs",link:{type:"doc",id:"apis/siren-apis"},items:[a(73252)]},{type:"category",label:"Reference",items:["reference/server_configuration","reference/client_configuration","reference/cli"]},{type:"category",label:"Extend",items:["extend/adding_new_provider","extend/adding_new_receiver"]},{type:"category",label:"Contribute",items:["contribute/contribution","contribute/release"]}]}},50891:(e,t,a)=>{"use strict";a.r(t),a.d(t,{apiVersion:()=>y,assets:()=>m,contentTitle:()=>d,default:()=>f,defaultHost:()=>b,frontMatter:()=>p,metadata:()=>u,toc:()=>g});var i=a(58168),s=(a(96540),a(15680)),r=a(4865),l=a(19365),n=a(64905),o=a(89236),c=a.n(o);const p={},d="Notification",u={unversionedId:"guides/notification",id:"guides/notification",title:"Notification",description:"To understand more concepts of notification in Siren, you can visit this page.",source:"@site/docs/guides/notification.md",sourceDirName:"guides",slug:"/guides/notification",permalink:"/siren/docs/guides/notification",draft:!1,editUrl:"https://github.com/goto/siren/edit/master/docs/docs/guides/notification.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Alert History",permalink:"/siren/docs/guides/alert_history"},next:{title:"Workers",permalink:"/siren/docs/guides/workers"}},m={},g=[{value:"Sending a message/notification",id:"sending-a-messagenotification",level:2},{value:"Example: Sending Notification to Slack",id:"example-sending-notification-to-slack",level:3},{value:"Alerts Notification",id:"alerts-notification",level:2}],y=c().customFields.apiVersion,b=c().customFields.defaultHost,h={toc:g,apiVersion:y},v="wrapper";function f(e){let{components:t,...a}=e;return(0,s.yg)(v,(0,i.A)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,s.yg)("h1",{id:"notification"},"Notification"),(0,s.yg)("p",null,"To understand more concepts of notification in Siren, you can visit this ",(0,s.yg)("a",{parentName:"p",href:"/siren/docs/concepts/notification"},"page"),"."),(0,s.yg)("h2",{id:"sending-a-messagenotification"},"Sending a message/notification"),(0,s.yg)("p",null,"We could send a notification with ",(0,s.yg)("inlineCode",{parentName:"p"},"POST /notifications")," API to a specific receiver by passing receiver labels information in the ",(0,s.yg)("inlineCode",{parentName:"p"},"receivers")," field in the body. The payload format needs to follow receiver type contract. "),(0,s.yg)("table",null,(0,s.yg)("thead",{parentName:"table"},(0,s.yg)("tr",{parentName:"thead"},(0,s.yg)("th",{parentName:"tr",align:null},"Field Name"),(0,s.yg)("th",{parentName:"tr",align:null},"Type"),(0,s.yg)("th",{parentName:"tr",align:null},"Required?"),(0,s.yg)("th",{parentName:"tr",align:null},"Description"))),(0,s.yg)("tbody",{parentName:"table"},(0,s.yg)("tr",{parentName:"tbody"},(0,s.yg)("td",{parentName:"tr",align:null},"receivers"),(0,s.yg)("td",{parentName:"tr",align:null},"list of json"),(0,s.yg)("td",{parentName:"tr",align:null},"yes"),(0,s.yg)("td",{parentName:"tr",align:null},"Selector of receivers using receiver labels ",(0,s.yg)("br",null),"[",(0,s.yg)("br",null)," {",(0,s.yg)("br",null),'   "id": 3,    ',(0,s.yg)("br",null),"  },",(0,s.yg)("br",null)," {",(0,s.yg)("br",null),'   "type": "slack_channel",',(0,s.yg)("br",null),'   "team": "de-infra"',(0,s.yg)("br",null)," },",(0,s.yg)("br",null)," {",(0,s.yg)("br",null),'   "type": "email",',(0,s.yg)("br",null),'   "team": "de-experience" ',(0,s.yg)("br",null)," }",(0,s.yg)("br",null),"]",(0,s.yg)("br",null))),(0,s.yg)("tr",{parentName:"tbody"},(0,s.yg)("td",{parentName:"tr",align:null},"This will fetch all receivers that have the labels."),(0,s.yg)("td",{parentName:"tr",align:null}),(0,s.yg)("td",{parentName:"tr",align:null}),(0,s.yg)("td",{parentName:"tr",align:null})),(0,s.yg)("tr",{parentName:"tbody"},(0,s.yg)("td",{parentName:"tr",align:null},"data"),(0,s.yg)("td",{parentName:"tr",align:null},"json"),(0,s.yg)("td",{parentName:"tr",align:null},"yes"),(0,s.yg)("td",{parentName:"tr",align:null},"any data that we want to pass to the message. The data will populate the corresponding template or content variables.")),(0,s.yg)("tr",{parentName:"tbody"},(0,s.yg)("td",{parentName:"tr",align:null},"template"),(0,s.yg)("td",{parentName:"tr",align:null},"string"),(0,s.yg)("td",{parentName:"tr",align:null},"no"),(0,s.yg)("td",{parentName:"tr",align:null},"template name that will be used to populate the message. default template will be used if this value is empty. errors might be thrown if there are errors when parsing template.")),(0,s.yg)("tr",{parentName:"tbody"},(0,s.yg)("td",{parentName:"tr",align:null},"labels"),(0,s.yg)("td",{parentName:"tr",align:null},"json"),(0,s.yg)("td",{parentName:"tr",align:null},"no"),(0,s.yg)("td",{parentName:"tr",align:null},"If populated, labels would be used by subscription matchers to find the subscribers that listen to specific labels. e.g. ",(0,s.yg)("br",null),"{",(0,s.yg)("br",null),'  "team": "de-infra",',(0,s.yg)("br",null),'  "severity": "CRITICAL"',(0,s.yg)("br",null),"}")))),(0,s.yg)("h3",{id:"example-sending-notification-to-slack"},"Example: Sending Notification to Slack"),(0,s.yg)("p",null,"Assuming there is a slack receiver registered in Siren with ID ",(0,s.yg)("inlineCode",{parentName:"p"},"51"),". Sending to that receiver would require us to have a ",(0,s.yg)("inlineCode",{parentName:"p"},"payload.data")," that have the same format as the expected ",(0,s.yg)("a",{parentName:"p",href:"/siren/docs/receivers/slack#message-payload"},"slack")," payload format."),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-yaml",metastring:"title=payload.yaml",title:"payload.yaml"},"payload:\n  data:\n    text: |-\n      New Paid Time Off request from <example.com|Fred Enriquez>\n\n      <https://example.com|View request>\n  template: sample-slack-msg\n")),(0,s.yg)(r.A,{groupId:"api",mdxType:"Tabs"},(0,s.yg)(l.A,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-bash"},"$ siren notifications send --file payload.yaml\n"))),(0,s.yg)(l.A,{value:"http",label:"HTTP",mdxType:"TabItem"},(0,s.yg)(n.A,{className:"language-bash",mdxType:"CodeBlock"},"$ curl --request POST\n  --url ",b,"/",y,'/notifications\n  --header \'content-type: application/json\'\n  --data-raw \'{\n    "payload": {\n        "data": {\n          "text": "New Paid Time Off request from <example.com|Fred Enriquez>\n\n<https://example.com|View request>"\n        }\n    }\n}\''))),(0,s.yg)("p",null,"Above end the message to channel name ",(0,s.yg)("inlineCode",{parentName:"p"},"#siren-devs")," with ",(0,s.yg)("inlineCode",{parentName:"p"},"payload.data")," in ",(0,s.yg)("a",{parentName:"p",href:"#slack"},"slack")," payload format."),(0,s.yg)("h2",{id:"alerts-notification"},"Alerts Notification"),(0,s.yg)("p",null,"For all incoming alerts via Siren hook API, notifications are also generated and published via subscriptions. Siren will match labels from the alerts with label matchers in subscriptions. The assigned receivers for all matched subscriptions will get the notifications. More details are explained ",(0,s.yg)("a",{parentName:"p",href:"/siren/docs/guides/alert_history"},"here"),". "),(0,s.yg)("p",null,"Siren has a default template for alerts notification for each receiver. Go to the ",(0,s.yg)("a",{parentName:"p",href:"/siren/docs/receivers/slack#default-alert-template"},"Receivers")," section to explore the default template defined by Siren."))}f.isMDXComponent=!0},76062:(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>i});const i={plain:{color:"#F8F8F2",backgroundColor:"#282A36"},styles:[{types:["prolog","constant","builtin"],style:{color:"rgb(189, 147, 249)"}},{types:["inserted","function"],style:{color:"rgb(80, 250, 123)"}},{types:["deleted"],style:{color:"rgb(255, 85, 85)"}},{types:["changed"],style:{color:"rgb(255, 184, 108)"}},{types:["punctuation","symbol"],style:{color:"rgb(248, 248, 242)"}},{types:["string","char","tag","selector"],style:{color:"rgb(255, 121, 198)"}},{types:["keyword","variable"],style:{color:"rgb(189, 147, 249)",fontStyle:"italic"}},{types:["comment"],style:{color:"rgb(98, 114, 164)"}},{types:["attr-name"],style:{color:"rgb(241, 250, 140)"}}]}},45603:(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>i});const i={plain:{color:"#393A34",backgroundColor:"#f6f8fa"},styles:[{types:["comment","prolog","doctype","cdata"],style:{color:"#999988",fontStyle:"italic"}},{types:["namespace"],style:{opacity:.7}},{types:["string","attr-value"],style:{color:"#e3116c"}},{types:["punctuation","operator"],style:{color:"#393A34"}},{types:["entity","url","symbol","number","boolean","variable","constant","property","regex","inserted"],style:{color:"#36acaa"}},{types:["atrule","keyword","attr-name","selector"],style:{color:"#00a4db"}},{types:["function","deleted","tag"],style:{color:"#d73a49"}},{types:["function-variable"],style:{color:"#6f42c1"}},{types:["tag","selector","keyword"],style:{color:"#00009f"}}]}}}]);