// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	subscription "github.com/goto/siren/core/subscription"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// Commit provides a mock function with given fields: ctx
func (_m *Repository) Commit(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type Repository_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Repository_Expecter) Commit(ctx interface{}) *Repository_Commit_Call {
	return &Repository_Commit_Call{Call: _e.mock.On("Commit", ctx)}
}

func (_c *Repository_Commit_Call) Run(run func(ctx context.Context)) *Repository_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Repository_Commit_Call) Return(_a0 error) *Repository_Commit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Commit_Call) RunAndReturn(run func(context.Context) error) *Repository_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *Repository) Create(_a0 context.Context, _a1 *subscription.Subscription) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *subscription.Subscription) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Repository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *subscription.Subscription
func (_e *Repository_Expecter) Create(_a0 interface{}, _a1 interface{}) *Repository_Create_Call {
	return &Repository_Create_Call{Call: _e.mock.On("Create", _a0, _a1)}
}

func (_c *Repository_Create_Call) Run(run func(_a0 context.Context, _a1 *subscription.Subscription)) *Repository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*subscription.Subscription))
	})
	return _c
}

func (_c *Repository_Create_Call) Return(_a0 error) *Repository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Create_Call) RunAndReturn(run func(context.Context, *subscription.Subscription) error) *Repository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *Repository) Delete(_a0 context.Context, _a1 uint64) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Repository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 uint64
func (_e *Repository_Expecter) Delete(_a0 interface{}, _a1 interface{}) *Repository_Delete_Call {
	return &Repository_Delete_Call{Call: _e.mock.On("Delete", _a0, _a1)}
}

func (_c *Repository_Delete_Call) Run(run func(_a0 context.Context, _a1 uint64)) *Repository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *Repository_Delete_Call) Return(_a0 error) *Repository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Delete_Call) RunAndReturn(run func(context.Context, uint64) error) *Repository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *Repository) Get(_a0 context.Context, _a1 uint64) (*subscription.Subscription, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *subscription.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*subscription.Subscription, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *subscription.Subscription); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*subscription.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Repository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 uint64
func (_e *Repository_Expecter) Get(_a0 interface{}, _a1 interface{}) *Repository_Get_Call {
	return &Repository_Get_Call{Call: _e.mock.On("Get", _a0, _a1)}
}

func (_c *Repository_Get_Call) Run(run func(_a0 context.Context, _a1 uint64)) *Repository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *Repository_Get_Call) Return(_a0 *subscription.Subscription, _a1 error) *Repository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_Get_Call) RunAndReturn(run func(context.Context, uint64) (*subscription.Subscription, error)) *Repository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: _a0, _a1
func (_m *Repository) List(_a0 context.Context, _a1 subscription.Filter) ([]subscription.Subscription, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []subscription.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, subscription.Filter) ([]subscription.Subscription, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, subscription.Filter) []subscription.Subscription); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]subscription.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, subscription.Filter) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type Repository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 subscription.Filter
func (_e *Repository_Expecter) List(_a0 interface{}, _a1 interface{}) *Repository_List_Call {
	return &Repository_List_Call{Call: _e.mock.On("List", _a0, _a1)}
}

func (_c *Repository_List_Call) Run(run func(_a0 context.Context, _a1 subscription.Filter)) *Repository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(subscription.Filter))
	})
	return _c
}

func (_c *Repository_List_Call) Return(_a0 []subscription.Subscription, _a1 error) *Repository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_List_Call) RunAndReturn(run func(context.Context, subscription.Filter) ([]subscription.Subscription, error)) *Repository_List_Call {
	_c.Call.Return(run)
	return _c
}

// MatchLabelsFetchReceivers provides a mock function with given fields: ctx, flt
func (_m *Repository) MatchLabelsFetchReceivers(ctx context.Context, flt subscription.Filter) ([]subscription.ReceiverView, error) {
	ret := _m.Called(ctx, flt)

	if len(ret) == 0 {
		panic("no return value specified for MatchLabelsFetchReceivers")
	}

	var r0 []subscription.ReceiverView
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, subscription.Filter) ([]subscription.ReceiverView, error)); ok {
		return rf(ctx, flt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, subscription.Filter) []subscription.ReceiverView); ok {
		r0 = rf(ctx, flt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]subscription.ReceiverView)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, subscription.Filter) error); ok {
		r1 = rf(ctx, flt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_MatchLabelsFetchReceivers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MatchLabelsFetchReceivers'
type Repository_MatchLabelsFetchReceivers_Call struct {
	*mock.Call
}

// MatchLabelsFetchReceivers is a helper method to define mock.On call
//   - ctx context.Context
//   - flt subscription.Filter
func (_e *Repository_Expecter) MatchLabelsFetchReceivers(ctx interface{}, flt interface{}) *Repository_MatchLabelsFetchReceivers_Call {
	return &Repository_MatchLabelsFetchReceivers_Call{Call: _e.mock.On("MatchLabelsFetchReceivers", ctx, flt)}
}

func (_c *Repository_MatchLabelsFetchReceivers_Call) Run(run func(ctx context.Context, flt subscription.Filter)) *Repository_MatchLabelsFetchReceivers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(subscription.Filter))
	})
	return _c
}

func (_c *Repository_MatchLabelsFetchReceivers_Call) Return(_a0 []subscription.ReceiverView, _a1 error) *Repository_MatchLabelsFetchReceivers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_MatchLabelsFetchReceivers_Call) RunAndReturn(run func(context.Context, subscription.Filter) ([]subscription.ReceiverView, error)) *Repository_MatchLabelsFetchReceivers_Call {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function with given fields: ctx, err
func (_m *Repository) Rollback(ctx context.Context, err error) error {
	ret := _m.Called(ctx, err)

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, error) error); ok {
		r0 = rf(ctx, err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type Repository_Rollback_Call struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
//   - ctx context.Context
//   - err error
func (_e *Repository_Expecter) Rollback(ctx interface{}, err interface{}) *Repository_Rollback_Call {
	return &Repository_Rollback_Call{Call: _e.mock.On("Rollback", ctx, err)}
}

func (_c *Repository_Rollback_Call) Run(run func(ctx context.Context, err error)) *Repository_Rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(error))
	})
	return _c
}

func (_c *Repository_Rollback_Call) Return(_a0 error) *Repository_Rollback_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Rollback_Call) RunAndReturn(run func(context.Context, error) error) *Repository_Rollback_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *Repository) Update(_a0 context.Context, _a1 *subscription.Subscription) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *subscription.Subscription) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Repository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *subscription.Subscription
func (_e *Repository_Expecter) Update(_a0 interface{}, _a1 interface{}) *Repository_Update_Call {
	return &Repository_Update_Call{Call: _e.mock.On("Update", _a0, _a1)}
}

func (_c *Repository_Update_Call) Run(run func(_a0 context.Context, _a1 *subscription.Subscription)) *Repository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*subscription.Subscription))
	})
	return _c
}

func (_c *Repository_Update_Call) Return(_a0 error) *Repository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Update_Call) RunAndReturn(run func(context.Context, *subscription.Subscription) error) *Repository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// WithTransaction provides a mock function with given fields: ctx
func (_m *Repository) WithTransaction(ctx context.Context) context.Context {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for WithTransaction")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// Repository_WithTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTransaction'
type Repository_WithTransaction_Call struct {
	*mock.Call
}

// WithTransaction is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Repository_Expecter) WithTransaction(ctx interface{}) *Repository_WithTransaction_Call {
	return &Repository_WithTransaction_Call{Call: _e.mock.On("WithTransaction", ctx)}
}

func (_c *Repository_WithTransaction_Call) Run(run func(ctx context.Context)) *Repository_WithTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Repository_WithTransaction_Call) Return(_a0 context.Context) *Repository_WithTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_WithTransaction_Call) RunAndReturn(run func(context.Context) context.Context) *Repository_WithTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
