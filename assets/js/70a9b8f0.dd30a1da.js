"use strict";(self.webpackChunksiren=self.webpackChunksiren||[]).push([[784],{3905:(e,n,i)=>{i.d(n,{Zo:()=>s,kt:()=>u});var t=i(7294);function r(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function o(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,t)}return i}function a(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?o(Object(i),!0).forEach((function(n){r(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function l(e,n){if(null==e)return{};var i,t,r=function(e,n){if(null==e)return{};var i,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)i=o[t],n.indexOf(i)>=0||(r[i]=e[i]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)i=o[t],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var c=t.createContext({}),f=function(e){var n=t.useContext(c),i=n;return e&&(i="function"==typeof e?e(n):a(a({},n),e)),i},s=function(e){var n=f(e.components);return t.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var i=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=f(i),u=r,g=p["".concat(c,".").concat(u)]||p[u]||d[u]||o;return i?t.createElement(g,a(a({ref:n},s),{},{components:i})):t.createElement(g,a({ref:n},s))}));function u(e,n){var i=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=i.length,a=new Array(o);a[0]=p;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var f=2;f<o;f++)a[f]=i[f];return t.createElement.apply(null,a)}return t.createElement.apply(null,i)}p.displayName="MDXCreateElement"},3601:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>f});var t=i(3117),r=(i(7294),i(3905));const o={},a="Add a New Receiver Plugin",l={unversionedId:"contribute/receiver",id:"contribute/receiver",title:"Add a New Receiver Plugin",description:"More details about the concept of receiver plugin can be found here.",source:"@site/docs/contribute/receiver.md",sourceDirName:"contribute",slug:"/contribute/receiver",permalink:"/siren/docs/contribute/receiver",draft:!1,editUrl:"https://github.com/odpf/siren/edit/master/docs/docs/contribute/receiver.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Contribution Process",permalink:"/siren/docs/contribute/contribution"},next:{title:"Add a New Provider Plugin",permalink:"/siren/docs/contribute/provider"}},c={},f=[{value:"Requirements",id:"requirements",level:2},{value:"Defining Configs",id:"defining-configs",level:2},{value:"Integrate New Plugin with Siren",id:"integrate-new-plugin-with-siren",level:2},{value:"Defining Configs",id:"defining-configs-1",level:2},{value:"Implement interfaces",id:"implement-interfaces",level:2},{value:"Integrate New Plugin with Siren",id:"integrate-new-plugin-with-siren-1",level:2}],s={toc:f};function d(e){let{components:n,...i}=e;return(0,r.kt)("wrapper",(0,t.Z)({},s,i,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"add-a-new-receiver-plugin"},"Add a New Receiver Plugin"),(0,r.kt)("p",null,"More details about the concept of receiver plugin can be found ",(0,r.kt)("a",{parentName:"p",href:"/siren/docs/concepts/plugin#receiver"},"here"),". "),(0,r.kt)("h2",{id:"requirements"},"Requirements"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"You need to figure out whether there is a need to do pre-processing of receiver configuration before storing to the database or enqueueing to the queue. For some receivers, there is a need to do encryption or validation in pre-processing step, in this case you could implement ",(0,r.kt)("inlineCode",{parentName:"p"},"PreHookDBTransformConfigs")," to transform and validate configurations before storing it to the DB and ",(0,r.kt)("inlineCode",{parentName:"p"},"PreHookQueueTransformConfigs")," to transform and validate configurations before storing it to the queue.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"If there is a need to transform back receiver's configurations (e.g. decrypting config), you need to implement ",(0,r.kt)("inlineCode",{parentName:"p"},"PostHookDBTransformConfigs")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"PostHookQueueTransformConfigs")," to transform the config back for processing.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"You need to implement ",(0,r.kt)("inlineCode",{parentName:"p"},"Send")," method to send notification message to the external notification vendor."))),(0,r.kt)("h2",{id:"defining-configs"},"Defining Configs"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If there is a need to have a generic config for the receiver that is being loaded during start-up, you could add a new ",(0,r.kt)("inlineCode",{parentName:"li"},"AppConfig")," and assign the config to ",(0,r.kt)("inlineCode",{parentName:"li"},"plugins/receivers/config.go")," to expose it to the app-level config. Siren will recognize and read the config when starting up."),(0,r.kt)("li",{parentName:"ul"},"It is also possible for a receiver to have different config in the receiver and subscription. For example, slack has a dedicated config called ",(0,r.kt)("inlineCode",{parentName:"li"},"channel_name")," in subscription to send notification only to a specific channel. In this case you need to define separate configurations: ",(0,r.kt)("inlineCode",{parentName:"li"},"ReceiverConfig")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"SubscriptionConfig"),"."),(0,r.kt)("li",{parentName:"ul"},"You need to implement ",(0,r.kt)("inlineCode",{parentName:"li"},"NotificationConfig")," which is a placeholder to combine ",(0,r.kt)("inlineCode",{parentName:"li"},"ReceiverConfig")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"SubscriptionConfig")," (if any). Therefore ",(0,r.kt)("inlineCode",{parentName:"li"},"NotificationConfig")," should just embed ",(0,r.kt)("inlineCode",{parentName:"li"},"ReceiverConfig")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"SubscriptionConfig")," (if needed). You might also want to add more function to validate and transform the config to ",(0,r.kt)("inlineCode",{parentName:"li"},"map[string]interface{}"),".")),(0,r.kt)("h2",{id:"integrate-new-plugin-with-siren"},"Integrate New Plugin with Siren"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Define and add your new type of plugin inside ",(0,r.kt)("inlineCode",{parentName:"li"},"core/providers/type.go"),"."),(0,r.kt)("li",{parentName:"ol"},"Initialize your plugin receiver service and notification service and add to the ",(0,r.kt)("inlineCode",{parentName:"li"},"ConfigResolver")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Notifier")," registries map in ",(0,r.kt)("inlineCode",{parentName:"li"},"cli/deps"),"."),(0,r.kt)("li",{parentName:"ol"},"To make sure notification handler and dlq handler process your new type, don't forget to add your new receiver type in notification message & dlq handler config or make it default to support all receiver types.")),(0,r.kt)("h1",{id:"sample-add-a-new-file-receiver"},"Sample: Add a new ",(0,r.kt)("inlineCode",{parentName:"h1"},"file")," receiver"),(0,r.kt)("p",null,"In this part, we will show how to add a new receiver plugin to send notifications to a local ",(0,r.kt)("inlineCode",{parentName:"p"},"file"),"."),(0,r.kt)("h2",{id:"defining-configs-1"},"Defining Configs"),(0,r.kt)("p",null,"To write a file, we need a ",(0,r.kt)("inlineCode",{parentName:"p"},"url")," of the file. This might be the only config that we needs. We also don't need to define ",(0,r.kt)("inlineCode",{parentName:"p"},"SubscriptionConfig")," since we don't need a specific config for the subscription."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'type ReceiverConfig struct {\n    URL string `mapstructure:"url"`\n}\n')),(0,r.kt)("p",null,"We define a ",(0,r.kt)("inlineCode",{parentName:"p"},"NotificationConfig")," which only embeds ",(0,r.kt)("inlineCode",{parentName:"p"},"ReceiverConfig"),". This is helpful to separate the concern for a specific use-cases in some plugins."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'type NotificationConfig struct {\n    ReceiverConfig `mapstructure:",squash"`\n}\n')),(0,r.kt)("p",null,"For ",(0,r.kt)("inlineCode",{parentName:"p"},"file")," type, we don't need an ",(0,r.kt)("inlineCode",{parentName:"p"},"AppConfig")," as for now. So we don't need to add one in ",(0,r.kt)("inlineCode",{parentName:"p"},"plugins/receivers/config.go"),"."),(0,r.kt)("p",null,"Now that we already have defined all configs needed, we needs to implement all methods of interfaces needed by defining a new ",(0,r.kt)("inlineCode",{parentName:"p"},"PluginService"),"."),(0,r.kt)("h2",{id:"implement-interfaces"},"Implement interfaces"),(0,r.kt)("p",null,"We need to create a new ",(0,r.kt)("inlineCode",{parentName:"p"},"Plugin")," and implement ",(0,r.kt)("inlineCode",{parentName:"p"},"ConfigResolver")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Notifier"),". For ",(0,r.kt)("inlineCode",{parentName:"p"},"file")," receiver, we don't need to do encryption of configs before and after writing and reading from the DB as well as Queue. Therefore, we only needs to implement ",(0,r.kt)("inlineCode",{parentName:"p"},"PreHookDBTransformConfigs")," to validate the config before storing it to the DB and ",(0,r.kt)("inlineCode",{parentName:"p"},"PreHookDBTransformConfigs")," to validate the config before enqueueing it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'// highlight-start\n\ntype PluginService struct {\n    base.UnimplementedService\n}\n\n// NewPluginService returns file receiver service struct. This service implement [receiver.Resolver] and [notification.Notifier] interface.\nfunc NewPluginService() *PluginService {\n    return &PluginService{}\n}\n\nfunc (s *PluginService) PreHookDBTransformConfigs(ctx context.Context, receiverConfigMap map[string]interface{}) (map[string]interface{}, error) {\n    receiverConfig := &ReceiverConfig{}\n    if err := mapstructure.Decode(receiverConfigMap, receiverConfig); err != nil {\n        return nil, fmt.Errorf("failed to transform configurations to receiver config: %w", err)\n    }\n\n    if err := receiverConfig.Validate(); err != nil {\n        return nil, errors.ErrInvalid.WithMsgf(err.Error())\n    }\n\n    return receiverConfig.AsMap(), nil\n}\n\nfunc (s *PluginService) PreHookTransformConfigs(ctx context.Context, notificationConfigMap map[string]interface{}) (map[string]interface{}, error) {\n    notificationConfig := &NotificationConfig{}\n    if err := mapstructure.Decode(notificationConfigMap, notificationConfig); err != nil {\n        return nil, fmt.Errorf("failed to transform configurations to slack notification config: %w", err)\n    }\n\n    if err := notificationConfig.Validate(); err != nil {\n        return nil, err\n    }\n\n    return notificationConfig.AsMap(), nil\n}\n// highlight-end\n')),(0,r.kt)("p",null,"Beside those 2 functions, we also need to add a function to send notifications (to write notifications to a file under ",(0,r.kt)("inlineCode",{parentName:"p"},"url"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'type PluginService struct {\n    base.UnimplementedService\n}\n\nfunc NewPluginService() *PluginService {\n    return &PluginService{}\n}\n\nfunc (s *PluginService) PreHookDBTransformConfigs(ctx context.Context, receiverConfigMap map[string]interface{}) (map[string]interface{}, error) {\n    receiverConfig := &ReceiverConfig{}\n    if err := mapstructure.Decode(receiverConfigMap, receiverConfig); err != nil {\n        return nil, fmt.Errorf("failed to transform configurations to receiver config: %w", err)\n    }\n\n    if err := receiverConfig.Validate(); err != nil {\n        return nil, errors.ErrInvalid.WithMsgf(err.Error())\n    }\n\n    return receiverConfig.AsMap(), nil\n}\n\nfunc (s *PluginService) PreHookQueueTransformConfigs(ctx context.Context, notificationConfigMap map[string]interface{}) (map[string]interface{}, error) {\n    notificationConfig := &NotificationConfig{}\n    if err := mapstructure.Decode(notificationConfigMap, notificationConfig); err != nil {\n        return nil, fmt.Errorf("failed to transform configurations to slack notification config: %w", err)\n    }\n\n    if err := notificationConfig.Validate(); err != nil {\n        return nil, err\n    }\n\n    return notificationConfig.AsMap(), nil\n}\n\n// highlight-start\nfunc (s *PluginService) Send(ctx context.Context, notificationMessage notification.Message) (bool, error) {\n    notificationConfig := &NotificationConfig{}\n    if err := mapstructure.Decode(notificationMessage.Configs, notificationConfig); err != nil {\n        return false, err\n    }\n\n    bodyBytes, err := json.Marshal(notificationMessage.Details)\n    if err != nil {\n        return false, err\n    }\n\n    fileInstance, err := os.OpenFile(notificationConfig.URL, os.O_RDWR|os.O_CREATE|os.O_APPEND, 0777)\n    if err != nil {\n        return false, err\n    }\n\n    byteNewLine := []byte("\\n")\n    bodyBytes = append(bodyBytes, byteNewLine...)\n    _, err = fileInstance.Write(bodyBytes)\n    if err != nil {\n        return false, err\n    }\n\n    return false, nil\n}\n// highlight-end\n')),(0,r.kt)("h2",{id:"integrate-new-plugin-with-siren-1"},"Integrate New Plugin with Siren"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Define and add your new type of plugin called ",(0,r.kt)("inlineCode",{parentName:"li"},"file")," inside ",(0,r.kt)("inlineCode",{parentName:"li"},"core/receivers/type.go"),"."),(0,r.kt)("li",{parentName:"ol"},"Initialize your plugin receiver service and notification service and add to the ",(0,r.kt)("inlineCode",{parentName:"li"},"ConfigResolver")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Notifier")," registries map in ",(0,r.kt)("inlineCode",{parentName:"li"},"cli/deps"),"."),(0,r.kt)("li",{parentName:"ol"},"To make sure notification handler and dlq handler process your new type, don't forget to add your new receiver type in notification message & dlq handler config or make it default to support all receiver types.")))}d.isMDXComponent=!0}}]);