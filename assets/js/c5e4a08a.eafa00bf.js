"use strict";(self.webpackChunksiren=self.webpackChunksiren||[]).push([[8266],{4967:function(e,i,n){n.r(i),n.d(i,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return c},default:function(){return u}});var t=n(7462),r=n(3366),a=(n(7294),n(3905)),o=["components"],s={},l="Usage",d={unversionedId:"guides/overview",id:"guides/overview",isDocsHomePage:!1,title:"Usage",description:"The following topics will describe how to use Siren.",source:"@site/docs/guides/overview.md",sourceDirName:"guides",slug:"/guides/overview",permalink:"/siren/docs/guides/overview",editUrl:"https://github.com/odpf/siren/edit/master/docs/docs/guides/overview.md",tags:[],version:"current",lastUpdatedBy:"Ravi Suhag",lastUpdatedAt:1666359878,formattedLastUpdatedAt:"10/21/2022",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Schema Design",permalink:"/siren/docs/concepts/schema"},next:{title:"Provider and Namespace",permalink:"/siren/docs/guides/provider_and_namespace"}},c=[{value:"CLI Interface",id:"cli-interface",children:[]},{value:"Managing providers and multi-tenancy",id:"managing-providers-and-multi-tenancy",children:[]},{value:"Managing Templates",id:"managing-templates",children:[]},{value:"Managing Rules",id:"managing-rules",children:[]},{value:"Managing bulk rules and templates",id:"managing-bulk-rules-and-templates",children:[]},{value:"Notifications",id:"notifications",children:[]},{value:"Receivers",id:"receivers",children:[]},{value:"Subscriptions",id:"subscriptions",children:[]},{value:"Alert History Subscription",id:"alert-history-subscription",children:[]},{value:"Deployment",id:"deployment",children:[]}],p={toc:c};function u(e){var i=e.components,n=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,t.Z)({},p,n,{components:i,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"usage"},"Usage"),(0,a.kt)("p",null,"The following topics will describe how to use Siren."),(0,a.kt)("h2",{id:"cli-interface"},"CLI Interface"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},"Siren provides alerting on metrics of your applications using Cortex metrics\nin a simple DIY configuration. With Siren, you can define templates(using go templates), and\ncreate/edit/enable/disable prometheus rules on demand.\n\nAvailable Commands:\n  alert          Manage alerts\n  completion     Generate shell completion scripts\n  config         Manage siren CLI configuration\n  help           Help about any command\n  job            Manage siren jobs\n  namespace      Manage namespaces\n  provider       Manage providers\n  receiver       Manage receivers\n  rule           Manage rules\n  server         Run siren server\n  template       Manage templates\n  worker         Start or manage Siren's workers\n")),(0,a.kt)("h2",{id:"managing-providers-and-multi-tenancy"},"Managing providers and multi-tenancy"),(0,a.kt)("p",null,"Siren can be used to define alerting rules inside monitoring ",(0,a.kt)("inlineCode",{parentName:"p"},"providers"),". List of supported\nproviders:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"http://cortexmetrics.io"},"CortexMetrics"),".")),(0,a.kt)("p",null,"Support for other providers is on the roadmap, feel free to contribute. Siren also respects the multi-tenancy provided by various monitoring providers using ",(0,a.kt)("inlineCode",{parentName:"p"},"namespaces"),". A ",(0,a.kt)("inlineCode",{parentName:"p"},"namespace")," represents a tenant inside your provider. Learn in more detail ",(0,a.kt)("a",{parentName:"p",href:"/siren/docs/guides/provider_and_namespace"},"here"),"."),(0,a.kt)("h2",{id:"managing-templates"},"Managing Templates"),(0,a.kt)("p",null,"Siren templates are abstraction to make data definition reusable (e.g. Prometheus rules to reuse same rule body to create multiple rules). Template could be used to define alerting rule body with go templates. Learn in more detail ",(0,a.kt)("a",{parentName:"p",href:"/siren/docs/guides/template"},"here"),"."),(0,a.kt)("h2",{id:"managing-rules"},"Managing Rules"),(0,a.kt)("p",null,"Siren rules are defined using a template by providing value for the variables defined inside that template. Learn in more details ",(0,a.kt)("a",{parentName:"p",href:"/siren/docs/guides/rule"},"here")),(0,a.kt)("h2",{id:"managing-bulk-rules-and-templates"},"Managing bulk rules and templates"),(0,a.kt)("p",null,"For org wide use cases, where teams need to manage multiple templates and rules Siren CLI can be highly useful. Think GitOps but for alerting. Learn in More detail ",(0,a.kt)("a",{parentName:"p",href:"/siren/docs/guides/rule#bulk-rule-management"},"here")),(0,a.kt)("h2",{id:"notifications"},"Notifications"),(0,a.kt)("p",null,"Siren capables to send notifications which could route a notification into a specific channel defined by a ",(0,a.kt)("a",{parentName:"p",href:"/siren/docs/guides/receiver"},"receiver"),". Siren uses key-value label matching for routing. There are two kind of notification route method, ",(0,a.kt)("inlineCode",{parentName:"p"},"direct notification to receiver")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"subscription-based notification"),"."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Direct Notification to Receiver:")," Siren provides a way to the user to send direct notification to a supported receiver by calling an API ",(0,a.kt)("inlineCode",{parentName:"p"},"/receivers/{receiver_id}/notify")," with a specific payload message.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Subscription-based Notification:")," The subscription-based notification is currently only works for triggered alerts. For each alerts coming to Siren's webhook, a notification will be generated and routed to specific ",(0,a.kt)("a",{parentName:"p",href:"/siren/docs/guides/receiver"},"receivers")," based on the ",(0,a.kt)("a",{parentName:"p",href:"/siren/docs/guides/subscription"},"subscriptions"),"."))),(0,a.kt)("h2",{id:"receivers"},"Receivers"),(0,a.kt)("p",null,"Receivers represent a notification medium e.g. Slack, PagerDuty, HTTP, which can be used to define routing configuration in Siren to control the behaviour of how the notifications are notified. You can use receivers to send notifications on demand as well as on certain matching conditions. Learn in more detail ",(0,a.kt)("a",{parentName:"p",href:"/siren/docs/guides/receiver"},"here"),"."),(0,a.kt)("h2",{id:"subscriptions"},"Subscriptions"),(0,a.kt)("p",null,"Siren can be used to route your notifications (non-alerts or alerts notification) to proper channels (receivers) based on the labels match conditions. You define your own set of label matchers and subscribe to alerts matching these labels in the notification mediums of your choice. Learn in more detail ",(0,a.kt)("a",{parentName:"p",href:"/siren/docs/guides/subscription"},"here"),"."),(0,a.kt)("h2",{id:"alert-history-subscription"},"Alert History Subscription"),(0,a.kt)("p",null,"Siren expect ",(0,a.kt)("inlineCode",{parentName:"p"},"provider")," to call Siren back when an alert is triggered, allowing storage of triggered alerts and sending notification via Siren. Storing triggered alerts is beneficial to be used for auditing and analytics purposes. Alert History is simply a ",(0,a.kt)("inlineCode",{parentName:"p"},"subscription")," defined using an ",(0,a.kt)("inlineCode",{parentName:"p"},"HTTP receiver")," on all alerts. Learn in more detail ",(0,a.kt)("a",{parentName:"p",href:"/siren/docs/guides/alert_history"},"here"),"."),(0,a.kt)("h2",{id:"deployment"},"Deployment"),(0,a.kt)("p",null,"Refer ",(0,a.kt)("a",{parentName:"p",href:"/siren/docs/guides/deployment"},"here")," to learn how to deploy Siren in production."))}u.isMDXComponent=!0}}]);