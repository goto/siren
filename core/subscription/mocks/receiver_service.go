// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	context "context"

	receiver "github.com/odpf/siren/core/receiver"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// ReceiverService is an autogenerated mock type for the ReceiverService type
type ReceiverService struct {
	mock.Mock
}

type ReceiverService_Expecter struct {
	mock *mock.Mock
}

func (_m *ReceiverService) EXPECT() *ReceiverService_Expecter {
	return &ReceiverService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *ReceiverService) Create(_a0 context.Context, _a1 *receiver.Receiver) (uint64, error) {
	ret := _m.Called(_a0, _a1)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(context.Context, *receiver.Receiver) uint64); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *receiver.Receiver) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReceiverService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ReceiverService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *receiver.Receiver
func (_e *ReceiverService_Expecter) Create(_a0 interface{}, _a1 interface{}) *ReceiverService_Create_Call {
	return &ReceiverService_Create_Call{Call: _e.mock.On("Create", _a0, _a1)}
}

func (_c *ReceiverService_Create_Call) Run(run func(_a0 context.Context, _a1 *receiver.Receiver)) *ReceiverService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*receiver.Receiver))
	})
	return _c
}

func (_c *ReceiverService_Create_Call) Return(_a0 uint64, _a1 error) *ReceiverService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *ReceiverService) Delete(_a0 context.Context, _a1 uint64) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReceiverService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ReceiverService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 uint64
func (_e *ReceiverService_Expecter) Delete(_a0 interface{}, _a1 interface{}) *ReceiverService_Delete_Call {
	return &ReceiverService_Delete_Call{Call: _e.mock.On("Delete", _a0, _a1)}
}

func (_c *ReceiverService_Delete_Call) Run(run func(_a0 context.Context, _a1 uint64)) *ReceiverService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *ReceiverService_Delete_Call) Return(_a0 error) *ReceiverService_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *ReceiverService) Get(_a0 context.Context, _a1 uint64) (*receiver.Receiver, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *receiver.Receiver
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *receiver.Receiver); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*receiver.Receiver)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReceiverService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type ReceiverService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 uint64
func (_e *ReceiverService_Expecter) Get(_a0 interface{}, _a1 interface{}) *ReceiverService_Get_Call {
	return &ReceiverService_Get_Call{Call: _e.mock.On("Get", _a0, _a1)}
}

func (_c *ReceiverService_Get_Call) Run(run func(_a0 context.Context, _a1 uint64)) *ReceiverService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *ReceiverService_Get_Call) Return(_a0 *receiver.Receiver, _a1 error) *ReceiverService_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// List provides a mock function with given fields: _a0
func (_m *ReceiverService) List(_a0 context.Context) ([]*receiver.Receiver, error) {
	ret := _m.Called(_a0)

	var r0 []*receiver.Receiver
	if rf, ok := ret.Get(0).(func(context.Context) []*receiver.Receiver); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*receiver.Receiver)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReceiverService_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type ReceiverService_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//  - _a0 context.Context
func (_e *ReceiverService_Expecter) List(_a0 interface{}) *ReceiverService_List_Call {
	return &ReceiverService_List_Call{Call: _e.mock.On("List", _a0)}
}

func (_c *ReceiverService_List_Call) Run(run func(_a0 context.Context)) *ReceiverService_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ReceiverService_List_Call) Return(_a0 []*receiver.Receiver, _a1 error) *ReceiverService_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Notify provides a mock function with given fields: _a0, _a1, _a2
func (_m *ReceiverService) Notify(_a0 context.Context, _a1 uint64, _a2 receiver.NotificationMessage) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, receiver.NotificationMessage) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReceiverService_Notify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Notify'
type ReceiverService_Notify_Call struct {
	*mock.Call
}

// Notify is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 uint64
//  - _a2 receiver.NotificationMessage
func (_e *ReceiverService_Expecter) Notify(_a0 interface{}, _a1 interface{}, _a2 interface{}) *ReceiverService_Notify_Call {
	return &ReceiverService_Notify_Call{Call: _e.mock.On("Notify", _a0, _a1, _a2)}
}

func (_c *ReceiverService_Notify_Call) Run(run func(_a0 context.Context, _a1 uint64, _a2 receiver.NotificationMessage)) *ReceiverService_Notify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(receiver.NotificationMessage))
	})
	return _c
}

func (_c *ReceiverService_Notify_Call) Return(_a0 error) *ReceiverService_Notify_Call {
	_c.Call.Return(_a0)
	return _c
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *ReceiverService) Update(_a0 context.Context, _a1 *receiver.Receiver) (uint64, error) {
	ret := _m.Called(_a0, _a1)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(context.Context, *receiver.Receiver) uint64); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *receiver.Receiver) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReceiverService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type ReceiverService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *receiver.Receiver
func (_e *ReceiverService_Expecter) Update(_a0 interface{}, _a1 interface{}) *ReceiverService_Update_Call {
	return &ReceiverService_Update_Call{Call: _e.mock.On("Update", _a0, _a1)}
}

func (_c *ReceiverService_Update_Call) Run(run func(_a0 context.Context, _a1 *receiver.Receiver)) *ReceiverService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*receiver.Receiver))
	})
	return _c
}

func (_c *ReceiverService_Update_Call) Return(_a0 uint64, _a1 error) *ReceiverService_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// NewReceiverService creates a new instance of ReceiverService. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewReceiverService(t testing.TB) *ReceiverService {
	mock := &ReceiverService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
