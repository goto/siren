// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: gotocompany/siren/v1/siren.proto

package sirenv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SirenServiceClient is the client API for SirenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SirenServiceClient interface {
	ListSubscriptions(ctx context.Context, in *ListSubscriptionsRequest, opts ...grpc.CallOption) (*ListSubscriptionsResponse, error)
}

type sirenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSirenServiceClient(cc grpc.ClientConnInterface) SirenServiceClient {
	return &sirenServiceClient{cc}
}

func (c *sirenServiceClient) ListSubscriptions(ctx context.Context, in *ListSubscriptionsRequest, opts ...grpc.CallOption) (*ListSubscriptionsResponse, error) {
	out := new(ListSubscriptionsResponse)
	err := c.cc.Invoke(ctx, "/gotocompany.siren.v1.SirenService/ListSubscriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SirenServiceServer is the server API for SirenService service.
// All implementations must embed UnimplementedSirenServiceServer
// for forward compatibility
type SirenServiceServer interface {
	ListSubscriptions(context.Context, *ListSubscriptionsRequest) (*ListSubscriptionsResponse, error)
	mustEmbedUnimplementedSirenServiceServer()
}

// UnimplementedSirenServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSirenServiceServer struct {
}

func (UnimplementedSirenServiceServer) ListSubscriptions(context.Context, *ListSubscriptionsRequest) (*ListSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscriptions not implemented")
}
func (UnimplementedSirenServiceServer) mustEmbedUnimplementedSirenServiceServer() {}

// UnsafeSirenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SirenServiceServer will
// result in compilation errors.
type UnsafeSirenServiceServer interface {
	mustEmbedUnimplementedSirenServiceServer()
}

func RegisterSirenServiceServer(s grpc.ServiceRegistrar, srv SirenServiceServer) {
	s.RegisterService(&SirenService_ServiceDesc, srv)
}

func _SirenService_ListSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).ListSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gotocompany.siren.v1.SirenService/ListSubscriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).ListSubscriptions(ctx, req.(*ListSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SirenService_ServiceDesc is the grpc.ServiceDesc for SirenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SirenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gotocompany.siren.v1.SirenService",
	HandlerType: (*SirenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSubscriptions",
			Handler:    _SirenService_ListSubscriptions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gotocompany/siren/v1/siren.proto",
}
