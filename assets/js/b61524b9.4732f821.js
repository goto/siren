(self.webpackChunksiren=self.webpackChunksiren||[]).push([[484],{1410:(e,t,r)=>{const a=r(7694),n=r(3618);e.exports={title:"Siren",tagline:"Universal data observability toolkit",url:"https://odpf.github.io",baseUrl:"/siren/",onBrokenLinks:"throw",onBrokenMarkdownLinks:"warn",favicon:"img/favicon.ico",organizationName:"odpf",projectName:"siren",customFields:{apiVersion:"v1beta1",defaultHost:"http://localhost:8080"},presets:[["@docusaurus/preset-classic",{docs:{sidebarPath:6679,editUrl:"https://github.com/odpf/siren/edit/master/docs/",sidebarCollapsed:!0,breadcrumbs:!1},blog:!1,theme:{customCss:[5308,2295]},gtag:{trackingID:"G-EPXDLH6V72"}}]],themeConfig:{colorMode:{defaultMode:"light",respectPrefersColorScheme:!0},navbar:{title:"Siren",logo:{src:"img/logo.svg"},hideOnScroll:!0,items:[{type:"doc",docId:"introduction",position:"right",label:"Docs"},{to:"docs/support",label:"Support",position:"right"},{href:"https://bit.ly/2RzPbtn",position:"right",className:"header-slack-link"},{href:"https://github.com/odpf/siren",className:"navbar-item-github",position:"right"}]},footer:{style:"light",links:[]},prism:{theme:a,darkTheme:n},announcementBar:{id:"star-repo",content:'\u2b50\ufe0f If you like Siren, give it a star on <a target="_blank" rel="noopener noreferrer" href="https://github.com/odpf/siren">GitHub</a>! \u2b50',backgroundColor:"#222",textColor:"#eee",isCloseable:!0}}}},5162:(e,t,r)=>{"use strict";r.d(t,{Z:()=>o});var a=r(7294),n=r(4334);const i="tabItem_Ymn6";function o(e){let{children:t,hidden:r,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,n.Z)(i,o),hidden:r},t)}},5488:(e,t,r)=>{"use strict";r.d(t,{Z:()=>m});var a=r(3117),n=r(7294),i=r(4334),o=r(2389),s=r(7392),l=r(7094),c=r(2466);const d="tabList__CuJ",u="tabItem_LNqP";function p(e){var t;const{lazy:r,block:o,defaultValue:p,values:m,groupId:g,className:f}=e,v=n.Children.map(e.children,(e=>{if((0,n.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),b=m??v.map((e=>{let{props:{value:t,label:r,attributes:a}}=e;return{value:t,label:r,attributes:a}})),h=(0,s.l)(b,((e,t)=>e.value===t.value));if(h.length>0)throw new Error(`Docusaurus error: Duplicate values "${h.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===p?p:p??(null==(t=v.find((e=>e.props.default)))?void 0:t.props.value)??v[0].props.value;if(null!==y&&!b.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${b.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:k,setTabGroupChoices:_}=(0,l.U)(),[N,T]=(0,n.useState)(y),C=[],{blockElementScrollPositionUntilNextRender:w}=(0,c.o5)();if(null!=g){const e=k[g];null!=e&&e!==N&&b.some((t=>t.value===e))&&T(e)}const I=e=>{const t=e.currentTarget,r=C.indexOf(t),a=b[r].value;a!==N&&(w(t),T(a),null!=g&&_(g,String(a)))},x=e=>{var t;let r=null;switch(e.key){case"Enter":I(e);break;case"ArrowRight":{const t=C.indexOf(e.currentTarget)+1;r=C[t]??C[0];break}case"ArrowLeft":{const t=C.indexOf(e.currentTarget)-1;r=C[t]??C[C.length-1];break}}null==(t=r)||t.focus()};return n.createElement("div",{className:(0,i.Z)("tabs-container",d)},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":o},f)},b.map((e=>{let{value:t,label:r,attributes:o}=e;return n.createElement("li",(0,a.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:e=>C.push(e),onKeyDown:x,onClick:I},o,{className:(0,i.Z)("tabs__item",u,null==o?void 0:o.className,{"tabs__item--active":N===t})}),r??t)}))),r?(0,n.cloneElement)(v.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):n.createElement("div",{className:"margin-top--md"},v.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function m(e){const t=(0,o.Z)();return n.createElement(p,(0,a.Z)({key:String(t)},e))}},6679:e=>{e.exports={docsSidebar:["introduction","installation",{type:"category",label:"Tour",items:["tour/overview","tour/start_server","tour/registering_provider","tour/registering_receivers","tour/sending_notifications_to_receiver","tour/configuring_provider_alerting_rules","tour/subscribing_notifications"]},{type:"category",label:"Concepts",items:["concepts/overview","concepts/plugin","concepts/schema"]},{type:"category",label:"Guides",items:["guides/overview","guides/provider_and_namespace","guides/receiver","guides/subscription","guides/rule","guides/template","guides/alert_history","guides/notification","guides/deployment"]},{type:"category",label:"Contribute",items:["contribute/contribution","contribute/receiver","contribute/provider","contribute/release"]},{type:"category",label:"Reference",items:["reference/api","reference/server_configuration","reference/client_configuration","reference/receiver","reference/cli"]}]}},9046:(e,t,r)=>{"use strict";r.r(t),r.d(t,{apiVersion:()=>f,assets:()=>m,contentTitle:()=>u,default:()=>h,defaultHost:()=>v,frontMatter:()=>d,metadata:()=>p,toc:()=>g});var a=r(3117),n=(r(7294),r(3905)),i=r(5488),o=r(5162),s=r(6066),l=r(1410),c=r.n(l);const d={},u="4 - Sending Notification to Receiver",p={unversionedId:"tour/sending_notifications_to_receiver",id:"tour/sending_notifications_to_receiver",title:"4 - Sending Notification to Receiver",description:"In previous part, we have already registered several receivers and got back the receiver IDs. We could send a notification to the receivers with /receivers/:receiverId/send API. We can use Siren CLI to do this.",source:"@site/docs/tour/4_sending_notifications_to_receiver.md",sourceDirName:"tour",slug:"/tour/sending_notifications_to_receiver",permalink:"/siren/docs/tour/sending_notifications_to_receiver",draft:!1,editUrl:"https://github.com/odpf/siren/edit/master/docs/docs/tour/4_sending_notifications_to_receiver.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"docsSidebar",previous:{title:"Register receivers",permalink:"/siren/docs/tour/registering_receivers"},next:{title:"5 - Configuring Provider Alerting Rules",permalink:"/siren/docs/tour/configuring_provider_alerting_rules"}},m={},g=[],f=c().customFields.apiVersion,v=c().customFields.defaultHost,b={toc:g,apiVersion:f};function h(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},b,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"4---sending-notification-to-receiver"},"4 - Sending Notification to Receiver"),(0,n.kt)("p",null,"In previous ",(0,n.kt)("a",{parentName:"p",href:"/siren/docs/tour/registering_receivers"},"part"),", we have already registered several receivers and got back the receiver IDs. We could send a notification to the receivers with ",(0,n.kt)("inlineCode",{parentName:"p"},"/receivers/:receiverId/send")," API. We can use Siren CLI to do this."),(0,n.kt)("p",null,"We need to prepare the message payload as yaml to be sent by Siren CLI. The message is expected to be placed under ",(0,n.kt)("inlineCode",{parentName:"p"},"payload.data"),"."),(0,n.kt)("p",null,"Prepare a message to send to receiver 1."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"cat <<EOT >> message_file_1.yaml\npayload:\n    data:\n        text: this is notification to file 1\n        a_field: a_value\n        another_field: another_value\nEOT\n")),(0,n.kt)("p",null,"Then we can run ",(0,n.kt)("inlineCode",{parentName:"p"},"receiver send")," command and target the receiver id ",(0,n.kt)("inlineCode",{parentName:"p"},"1")," with flag ",(0,n.kt)("inlineCode",{parentName:"p"},"--id"),"."),(0,n.kt)(i.Z,{groupId:"api",mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"./siren receiver send --id 1 -f message_file_1.yaml\n"))),(0,n.kt)(o.Z,{value:"http",label:"HTTP",mdxType:"TabItem"},(0,n.kt)(s.Z,{className:"language-bash",mdxType:"CodeBlock"},"$ curl --request POST\n  --url ",v,"/",f,'/receivers/1/send\n  --header \'content-type: application/json\'\n  --data-raw \'{\n    "payload": {\n        "data": {\n            "text": "this is notification to file 1",\n            "a_field": "a_value",\n            "another_field": "another_value"\n        }\n    }\n}\''))),(0,n.kt)("p",null,"Prepare a message to send to receiver 2."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"cat <<EOT >> message_file_2.yaml\npayload:\n    data:\n        text: this is notification to file 2\n        a_field: a_value\n        another_field: another_value\nEOT\n")),(0,n.kt)("p",null,"Then we can run ",(0,n.kt)("inlineCode",{parentName:"p"},"receiver send")," command and target the receiver id ",(0,n.kt)("inlineCode",{parentName:"p"},"2")," with flag ",(0,n.kt)("inlineCode",{parentName:"p"},"--id"),"."),(0,n.kt)(i.Z,{groupId:"api",mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"./siren receiver send --id 2 -f message_file_2.yaml\n"))),(0,n.kt)(o.Z,{value:"http",label:"HTTP",mdxType:"TabItem"},(0,n.kt)(s.Z,{className:"language-bash",mdxType:"CodeBlock"},"$ curl --request POST\n  --url ",v,"/",f,'/receivers/2/send\n  --header \'content-type: application/json\'\n  --data-raw \'{\n    "payload": {\n        "data": {\n            "text": "this is notification to file 2",\n            "a_field": "a_value",\n            "another_field": "another_value"\n        }\n    }\n}\''))),(0,n.kt)("p",null,"If succeed, two new files have been created: ",(0,n.kt)("inlineCode",{parentName:"p"},"out-file-sink1.json")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"out-file-sink2.json"),". Each file will have this content:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-json"},'// out-file-sink1.json\n{"a_field":"a_value","another_field":"another_value","routing_method":"receiver","text":"this is notification to file 1"}\n')),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-json"},'// out-file-sink2.json\n{"a_field":"a_value","another_field":"another_value","routing_method":"receiver","text":"this is notification to file 2"}\n')))}h.isMDXComponent=!0},3618:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>a});const a={plain:{color:"#F8F8F2",backgroundColor:"#282A36"},styles:[{types:["prolog","constant","builtin"],style:{color:"rgb(189, 147, 249)"}},{types:["inserted","function"],style:{color:"rgb(80, 250, 123)"}},{types:["deleted"],style:{color:"rgb(255, 85, 85)"}},{types:["changed"],style:{color:"rgb(255, 184, 108)"}},{types:["punctuation","symbol"],style:{color:"rgb(248, 248, 242)"}},{types:["string","char","tag","selector"],style:{color:"rgb(255, 121, 198)"}},{types:["keyword","variable"],style:{color:"rgb(189, 147, 249)",fontStyle:"italic"}},{types:["comment"],style:{color:"rgb(98, 114, 164)"}},{types:["attr-name"],style:{color:"rgb(241, 250, 140)"}}]}},7694:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>a});const a={plain:{color:"#393A34",backgroundColor:"#f6f8fa"},styles:[{types:["comment","prolog","doctype","cdata"],style:{color:"#999988",fontStyle:"italic"}},{types:["namespace"],style:{opacity:.7}},{types:["string","attr-value"],style:{color:"#e3116c"}},{types:["punctuation","operator"],style:{color:"#393A34"}},{types:["entity","url","symbol","number","boolean","variable","constant","property","regex","inserted"],style:{color:"#36acaa"}},{types:["atrule","keyword","attr-name","selector"],style:{color:"#00a4db"}},{types:["function","deleted","tag"],style:{color:"#d73a49"}},{types:["function-variable"],style:{color:"#6f42c1"}},{types:["tag","selector","keyword"],style:{color:"#00009f"}}]}}}]);