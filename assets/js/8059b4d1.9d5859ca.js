(self.webpackChunksiren=self.webpackChunksiren||[]).push([[7618],{1410:function(e,t,a){var n=a(7694),r=a(3618);e.exports={title:"Siren",tagline:"Universal data observability toolkit",url:"https://odpf.github.io",baseUrl:"/siren/",onBrokenLinks:"throw",onBrokenMarkdownLinks:"warn",favicon:"img/favicon.ico",organizationName:"odpf",projectName:"siren",customFields:{apiVersion:"v1beta1",defaultHost:"http://localhost:8080"},themeConfig:{colorMode:{defaultMode:"light",respectPrefersColorScheme:!0,switchConfig:{darkIcon:"\u263e",lightIcon:"\u2600\ufe0f"}},navbar:{title:"Siren",logo:{src:"img/logo.svg"},items:[{type:"doc",docId:"introduction",position:"left",label:"Docs"},{to:"/blog",label:"Blog",position:"left"},{to:"/help",label:"Help",position:"left"},{href:"https://bit.ly/2RzPbtn",position:"right",className:"header-slack-link"},{href:"https://github.com/odpf/siren",className:"navbar-item-github",position:"right"}]},footer:{style:"light",links:[{title:"Products",items:[{label:"Meteor",href:"https://github.com/odpf/meteor"},{label:"Firehose",href:"https://github.com/odpf/firehose"},{label:"Raccoon",href:"https://github.com/odpf/raccoon"},{label:"Dagger",href:"https://odpf.github.io/dagger/"}]},{title:"Resources",items:[{label:"Docs",to:"/docs/introduction"},{label:"Blog",to:"/blog"},{label:"Help",to:"/help"}]},{title:"Community",items:[{label:"Slack",href:"https://bit.ly/2RzPbtn"},{label:"GitHub",href:"https://github.com/odpf/siren"}]}],copyright:"Copyright \xa9 2022-"+(new Date).getFullYear()+" ODPF"},prism:{theme:n,darkTheme:r},gtag:{trackingID:"G-XXX"},announcementBar:{id:"star-repo",content:'\u2b50\ufe0f If you like Siren, give it a star on <a target="_blank" rel="noopener noreferrer" href="https://github.com/odpf/siren">GitHub</a>! \u2b50',backgroundColor:"#222",textColor:"#eee",isCloseable:!0}},presets:[["@docusaurus/preset-classic",{docs:{showLastUpdateAuthor:!0,showLastUpdateTime:!0,sidebarPath:6679,editUrl:"https://github.com/odpf/siren/edit/master/docs/"},blog:{showReadingTime:!0,editUrl:"https://github.com/odpf/siren/edit/master/docs/blog/"},theme:{customCss:[5308,2295]}}]]}},8215:function(e,t,a){"use strict";var n=a(7294);t.Z=function(e){var t=e.children,a=e.hidden,r=e.className;return n.createElement("div",{role:"tabpanel",hidden:a,className:r},t)}},5064:function(e,t,a){"use strict";a.d(t,{Z:function(){return p}});var n=a(7294),r=a(9443);var l=function(){var e=(0,n.useContext)(r.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},i=a(6010),o="tabItem_vU9c",s="tabItemActive_cw6a";var p=function(e){var t,a=e.lazy,r=e.block,p=e.defaultValue,u=e.values,d=e.groupId,c=e.className,m=n.Children.toArray(e.children),g=null!=u?u:m.map((function(e){return{value:e.props.value,label:e.props.label}})),h=null!=p?p:null==(t=m.find((function(e){return e.props.default})))?void 0:t.props.value,f=l(),b=f.tabGroupChoices,k=f.setTabGroupChoices,y=(0,n.useState)(h),N=y[0],v=y[1],C=[];if(null!=d){var w=b[d];null!=w&&w!==N&&g.some((function(e){return e.value===w}))&&v(w)}var T=function(e){var t=e.currentTarget,a=C.indexOf(t),n=g[a].value;v(n),null!=d&&(k(d,n),setTimeout((function(){var e,a,n,r,l,i,o,p;(e=t.getBoundingClientRect(),a=e.top,n=e.left,r=e.bottom,l=e.right,i=window,o=i.innerHeight,p=i.innerWidth,a>=0&&l<=p&&r<=o&&n>=0)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(s),setTimeout((function(){return t.classList.remove(s)}),2e3))}),150))},I=function(e){var t,a=null;switch(e.key){case"ArrowRight":var n=C.indexOf(e.target)+1;a=C[n]||C[0];break;case"ArrowLeft":var r=C.indexOf(e.target)-1;a=C[r]||C[C.length-1]}null==(t=a)||t.focus()};return n.createElement("div",{className:"tabs-container"},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":r},c)},g.map((function(e){var t=e.value,a=e.label;return n.createElement("li",{role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,className:(0,i.Z)("tabs__item",o,{"tabs__item--active":N===t}),key:t,ref:function(e){return C.push(e)},onKeyDown:I,onFocus:T,onClick:T},null!=a?a:t)}))),a?(0,n.cloneElement)(m.filter((function(e){return e.props.value===N}))[0],{className:"margin-vert--md"}):n.createElement("div",{className:"margin-vert--md"},m.map((function(e,t){return(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==N})}))))}},6679:function(e){e.exports={docsSidebar:["introduction",{type:"category",label:"Tour",items:["tour/introduction","tour/startup_siren_server","tour/registering_provider","tour/registering_receivers","tour/sending_notifications_to_receiver","tour/configuring_provider_alerting_rules","tour/subscribing_notifications"]},{type:"category",label:"Concepts",items:["concepts/overview","concepts/plugin","concepts/schema"]},{type:"category",label:"Guides",items:["guides/overview","guides/provider_and_namespace","guides/receiver","guides/subscription","guides/rule","guides/template","guides/alert_history","guides/notification","guides/deployment"]},{type:"category",label:"Contribute",items:["contribute/contribution","contribute/receiver","contribute/provider","contribute/release"]},{type:"category",label:"Reference",items:["reference/api","reference/server_configuration","reference/client_configuration","reference/receiver","reference/cli"]}]}},2326:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return c},contentTitle:function(){return m},metadata:function(){return g},toc:function(){return h},apiVersion:function(){return f},defaultHost:function(){return b},default:function(){return y}});var n=a(7462),r=a(3366),l=(a(7294),a(3905)),i=a(5064),o=a(8215),s=a(6213),p=a(1410),u=a.n(p),d=["components"],c={},m="Rule",g={unversionedId:"guides/rule",id:"guides/rule",isDocsHomePage:!1,title:"Rule",description:"export const apiVersion = siteConfig.customFields.apiVersion",source:"@site/docs/guides/rule.md",sourceDirName:"guides",slug:"/guides/rule",permalink:"/siren/docs/guides/rule",editUrl:"https://github.com/odpf/siren/edit/master/docs/docs/guides/rule.md",tags:[],version:"current",lastUpdatedBy:"Ravi Suhag",lastUpdatedAt:1666359878,formattedLastUpdatedAt:"10/21/2022",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Subscription",permalink:"/siren/docs/guides/subscription"},next:{title:"Template",permalink:"/siren/docs/guides/template"}},h=[{value:"API interface",id:"api-interface",children:[{value:"Creating/Updating a rule",id:"creatingupdating-a-rule",children:[]},{value:"Terminology of the request body",id:"terminology-of-the-request-body",children:[]}]},{value:"CLI Interface",id:"cli-interface",children:[{value:"Terminology",id:"terminology",children:[]}]},{value:"Managing Templates via YAML File",id:"managing-templates-via-yaml-file",children:[]},{value:"Managing Rules via YAML File",id:"managing-rules-via-yaml-file",children:[]},{value:"Use Case: CI",id:"use-case-ci",children:[]}],f=u().customFields.apiVersion,b=u().customFields.defaultHost,k={toc:h,apiVersion:f};function y(e){var t=e.components,a=(0,r.Z)(e,d);return(0,l.kt)("wrapper",(0,n.Z)({},k,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"rule"},"Rule"),(0,l.kt)("p",null,"Siren rules are generated from predefined ",(0,l.kt)("a",{parentName:"p",href:"/siren/docs/guides/template"},"templates")," by providing values of the variables of the template."),(0,l.kt)("p",null,"One can create templates using either HTTP APIs or CLI."),(0,l.kt)("h2",{id:"api-interface"},"API interface"),(0,l.kt)("p",null,"A rule is uniquely identified with the combination of provider's namespace (uniquely identifies which provider and namespace), template name, optional namespace, optional group name."),(0,l.kt)("p",null,"One can choose any namespace and group name. In Cortex terminology, namespace is a collection of groups. Groups can have\none or more rules."),(0,l.kt)("h3",{id:"creatingupdating-a-rule"},"Creating/Updating a rule"),(0,l.kt)("p",null,"The below snippet describes an example of rule creation/update. Same API can be used to enable or disable alerts."),(0,l.kt)(i.Z,{groupId:"api",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ siren rule create --file rule.yaml\n"))),(0,l.kt)(o.Z,{value:"http",label:"HTTP",mdxType:"TabItem"},(0,l.kt)(s.Z,{className:"language-bash",mdxType:"CodeBlock"},"$ curl --request PUT\n  --url ",b,"/",f,'/rules\n  --header \'content-type: application/json\'\n  --data-raw \'{\n  "namespace": "odpf",\n  "group_name": "CPUHigh",\n  "template": "CPU",\n  "providerNamespace": "3"\n  "variables": [\n    {\n      "name": "for",\n      "value": "15m",\n      "type": "string"\n    },\n     {\n      "name": "team",\n      "value": "odpf",\n      "type": "string"\n    }\n  ],\n  "enabled": true,\n}\''))),(0,l.kt)("p",null,'Here we are using CPU template and providing value for few variables("for", "team"). In case some variables value is not\nprovided default will be picked from the template\'s definition.'),(0,l.kt)("h3",{id:"terminology-of-the-request-body"},"Terminology of the request body"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Term"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Example/Default"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Namespace"),(0,l.kt)("td",{parentName:"tr",align:null},"Corresponds to Cortex namespace in which rule will be created"),(0,l.kt)("td",{parentName:"tr",align:null},"kafka")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Group Name"),(0,l.kt)("td",{parentName:"tr",align:null},"Corresponds to Cortex group name in which rule will be created"),(0,l.kt)("td",{parentName:"tr",align:null},"CPUHigh")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"providerNamespace"),(0,l.kt)("td",{parentName:"tr",align:null},"Corresponds to a tenant in a provider"),(0,l.kt)("td",{parentName:"tr",align:null},"4")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Template"),(0,l.kt)("td",{parentName:"tr",align:null},"what template is used to create the rule"),(0,l.kt)("td",{parentName:"tr",align:null},"CPU")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Variables"),(0,l.kt)("td",{parentName:"tr",align:null},"Value of variables defined inside the template"),(0,l.kt)("td",{parentName:"tr",align:null},"See example above")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Enabled"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean describing if the rule is enabled or not"),(0,l.kt)("td",{parentName:"tr",align:null},"true")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Fetching rules")),(0,l.kt)("p",null,"Rules can be fetched and filtered with multiple parameters. An example of all filters is described below."),(0,l.kt)(i.Z,{groupId:"api",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ siren rule list --namespace foo --provider-namespace 4 --group-name CPUHigh --template CPU\n"))),(0,l.kt)(o.Z,{value:"http",label:"HTTP",mdxType:"TabItem"},(0,l.kt)(s.Z,{className:"language-bash",mdxType:"CodeBlock"},"$ curl --request GET\n  --url ",b,"/",f,"/rules?namespace=foo&providerNamespace=4&groupName=CPUHigh&template=CPU"))),(0,l.kt)("h2",{id:"cli-interface"},"CLI Interface"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},'Work with rules.\n\nrules are used for alerting within a provider.\n\nUsage:\n  siren rule [command]\n\nAliases:\n  rule, rules\n\nAvailable Commands:\n  edit        Edit a rule\n  list        List rules\n  upload      Upload Rules YAML file\n\nFlags:\n  -h, --help   help for rule\n\nUse "siren rule [command] --help" for more information about a command.\n')),(0,l.kt)("p",null,"With CLI, you will need a YAML file in the below specified format to create/edit rules.\n",(0,l.kt)("strong",{parentName:"p"},"Example rule file")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v2\ntype: rule\nnamespace: demo\nprovider: localhost-cortex\nproviderNamespace: test\nrules:\n  TestGroup:\n    template: CPU\n    status: enabled\n    variables:\n      - name: for\n        value: 15m\n      - name: warning\n        value: 185\n      - name: critical\n        value: 195\n")),(0,l.kt)("p",null,"In the above example, we are creating rules\ninside ",(0,l.kt)("inlineCode",{parentName:"p"},"demo")," ",(0,l.kt)("a",{parentName:"p",href:"https://cortexmetrics.io/docs/api/#get-rule-groups-by-namespace"},"namespace"),"\nunder ",(0,l.kt)("inlineCode",{parentName:"p"},"test")," ",(0,l.kt)("a",{parentName:"p",href:"https://cortexmetrics.io/docs/architecture/#the-role-of-prometheus"},"tenant")," of ",(0,l.kt)("inlineCode",{parentName:"p"},"localhost-cortex"),"\nprovider."),(0,l.kt)("p",null,"The rules array defines actual rules defined over the templates. Here ",(0,l.kt)("inlineCode",{parentName:"p"},"TestGroup")," is the name of the group which will be\ncreated/updated with the rule defined by ",(0,l.kt)("inlineCode",{parentName:"p"},"CPU")," template. The example shows the value of variables provided in creating\nrules(alert)."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example upload command")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"siren rule upload cpu_rule.yaml\n")),(0,l.kt)("p",null,"The yaml file can be edited and re-uploaded to edit the rule thresholds."),(0,l.kt)("h3",{id:"terminology"},"Terminology"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Term"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Example/Default"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"API Version"),(0,l.kt)("td",{parentName:"tr",align:null},"Which API to use to parse the YAML file"),(0,l.kt)("td",{parentName:"tr",align:null},"v2")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Type"),(0,l.kt)("td",{parentName:"tr",align:null},"Describes the type of object represented by YAML file"),(0,l.kt)("td",{parentName:"tr",align:null},"rule")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Namespace"),(0,l.kt)("td",{parentName:"tr",align:null},"Corresponds to Cortex namespace in which rule will be created"),(0,l.kt)("td",{parentName:"tr",align:null},"kafka")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Entity"),(0,l.kt)("td",{parentName:"tr",align:null},"Corresponds to tenant name in cortex"),(0,l.kt)("td",{parentName:"tr",align:null},"odpf")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Rules"),(0,l.kt)("td",{parentName:"tr",align:null},"Map of GroupNames describing what template is used in a particular group"),(0,l.kt)("td",{parentName:"tr",align:null},"See example file")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Variables"),(0,l.kt)("td",{parentName:"tr",align:null},"Value of variables defined inside the template"),(0,l.kt)("td",{parentName:"tr",align:null},"See example above")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"provider"),(0,l.kt)("td",{parentName:"tr",align:null},"URN of monitoring provider to be used"),(0,l.kt)("td",{parentName:"tr",align:null},"localhost-cortex")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"providerNamespace"),(0,l.kt)("td",{parentName:"tr",align:null},"URN of tenant to choose inside the monitoring provider"),(0,l.kt)("td",{parentName:"tr",align:null},"test")))),(0,l.kt)("h2",{id:"managing-templates-via-yaml-file"},"Managing Templates via YAML File"),(0,l.kt)("p",null,"Siren gives flexibility to templatize rules for re-usability purpose. Template can be managed via APIs (REST\nand GRPC). Apart from that, there is a command line interface as well which parses a YAML file in a specified format (as\ndescribed below) and upload to Siren using an HTTP Client of Siren Service. Refer ",(0,l.kt)("a",{parentName:"p",href:"/siren/docs/guides/template"},"here")," for\nmore details around usage and terminology."),(0,l.kt)("h2",{id:"managing-rules-via-yaml-file"},"Managing Rules via YAML File"),(0,l.kt)("p",null,"To manage rules in bulk, Siren gives a way to manage rules using YAML files, which you can manage in a version\ncontrolled repository. Using the ",(0,l.kt)("inlineCode",{parentName:"p"},"upload")," command one can upload a rule YAML file in a specified format (as described\nbelow) and upload to Siren using the GRPC Client(comes inbuilt) of Siren Service. Refer ",(0,l.kt)("a",{parentName:"p",href:"/siren/docs/guides/rule"},"here")," for\nmore details around usage and terminology."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Note:")," Updating a template also updates the associated rules."),(0,l.kt)("h1",{id:"bulk-rule-management"},"Bulk Rule management"),(0,l.kt)("p",null,"For org wide use cases, teams end up managing a lot of rules, often manually. Siren CLI can be used to automate the rule creation, rule update, and ",(0,l.kt)("a",{parentName:"p",href:"/siren/docs/guides/template"},"template")," update."),(0,l.kt)("h2",{id:"use-case-ci"},"Use Case: CI"),(0,l.kt)("p",null,"The Siren CLI could further be used in GitOps scenario by putting all the rules and templates YAML files in a version controlled repository and uploading them using CI Jobs. By doing so, you will get speed in managing hundreds and thousands of rules in a reliable and predictable manner."),(0,l.kt)("p",null,"The benefits that one gets via this is:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Predictable state of alerts after each CI job run"),(0,l.kt)("li",{parentName:"ol"},"Easy to rollback if something goes wrong"),(0,l.kt)("li",{parentName:"ol"},"Version controlled alerting state, democratizing alert setup, removing dependency from a central team")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example setup")),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Create a github repo, let's call it ",(0,l.kt)("inlineCode",{parentName:"p"},"rules"),".")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Let's create a directory inside it and call it ",(0,l.kt)("inlineCode",{parentName:"p"},"templates"),". This is where people will put the YAML files of\nTemplates.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Let's create a template names ",(0,l.kt)("inlineCode",{parentName:"p"},"cpu.yaml")," and add the below content"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v2\ntype: template\nname: CPU\nbody:\n  - alert: CPUWarning\n    expr: avg by (host) (cpu_usage_user{cpu="cpu-total"}) > [[.warning]]\n    for: "[[.for]]"\n    labels:\n      severity: WARNING\n    annotations:\n      description: CPU has been above [[.warning]] for last [[.for]] {{ $labels.host }}\n  - alert: CPUCritical\n    expr: avg by (host) (cpu_usage_user{cpu="cpu-total"}) > [[.critical]]\n    for: "[[.for]]"\n    labels:\n      severity: CRITICAL\n    annotations:\n      description: CPU has been above [[.critical]] for last [[.for]] {{ $labels.host }}\nvariables:\n  - name: for\n    type: string\n    default: 10m\n    description: For eg 5m, 2h; Golang duration format\n  - name: warning\n    type: int\n    default: 80\n  - name: critical\n    type: int\n    default: 90\ntags:\n  - systems\n'))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Let's define a shell script which iterates over all files inside ",(0,l.kt)("inlineCode",{parentName:"p"},"templates/")," directory on github to upload templates\nto Siren."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'#!/bin/bash\nset -e\necho "------------------------------------------------------------"\necho "Uploading templates: $DIR"\necho "------------------------------------------------------------"\n\nfor FILE in templates/*; do\n  eval ./siren template upload $FILE\n  echo $\'\\n\'\ndone\n\n'))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Now as the last step we need to run this script using github action. Here we are pulling siren image and using\nthe ",(0,l.kt)("inlineCode",{parentName:"p"},"upload")," command to upload the templates to Siren Web service, denoted by ",(0,l.kt)("inlineCode",{parentName:"p"},"SIREN_SERVICE_HOST")," environment\nvariable. An example is:"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"// to be filled later\n")),(0,l.kt)("ol",{start:6},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"For rules, create a directory called ",(0,l.kt)("inlineCode",{parentName:"p"},"rules")," beside ",(0,l.kt)("inlineCode",{parentName:"p"},"templates")," and start define an example rule as given below."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v2\ntype: rule\nnamespace: demo\nprovider: production-cortex\nproviderNamespace: odpf\nrules:\n  TestGroup:\n    template: CPU\n    status: enabled\n    variables:\n      - name: for\n        value: 15m\n      - name: warning\n        value: 185\n      - name: critical\n        value: 195\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"We can upload the files inside ",(0,l.kt)("inlineCode",{parentName:"p"},"rules")," directory iteratively. Here is an example script. This can be called in github\nCI action."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'#!/bin/bash\nset -e\necho "------------------------------------------------------------"\necho "Uploading rules: $DIR"\necho "------------------------------------------------------------"\n\nfor FILE in rules/*; do\n  eval ./siren rule upload $FILE\n  echo $\'\\n\'\ndone\n')))))}y.isMDXComponent=!0},3618:function(e,t,a){"use strict";a.r(t);t.default={plain:{color:"#F8F8F2",backgroundColor:"#282A36"},styles:[{types:["prolog","constant","builtin"],style:{color:"rgb(189, 147, 249)"}},{types:["inserted","function"],style:{color:"rgb(80, 250, 123)"}},{types:["deleted"],style:{color:"rgb(255, 85, 85)"}},{types:["changed"],style:{color:"rgb(255, 184, 108)"}},{types:["punctuation","symbol"],style:{color:"rgb(248, 248, 242)"}},{types:["string","char","tag","selector"],style:{color:"rgb(255, 121, 198)"}},{types:["keyword","variable"],style:{color:"rgb(189, 147, 249)",fontStyle:"italic"}},{types:["comment"],style:{color:"rgb(98, 114, 164)"}},{types:["attr-name"],style:{color:"rgb(241, 250, 140)"}}]}},7694:function(e,t,a){"use strict";a.r(t);t.default={plain:{color:"#393A34",backgroundColor:"#f6f8fa"},styles:[{types:["comment","prolog","doctype","cdata"],style:{color:"#999988",fontStyle:"italic"}},{types:["namespace"],style:{opacity:.7}},{types:["string","attr-value"],style:{color:"#e3116c"}},{types:["punctuation","operator"],style:{color:"#393A34"}},{types:["entity","url","symbol","number","boolean","variable","constant","property","regex","inserted"],style:{color:"#36acaa"}},{types:["atrule","keyword","attr-name","selector"],style:{color:"#00a4db"}},{types:["function","deleted","tag"],style:{color:"#d73a49"}},{types:["function-variable"],style:{color:"#6f42c1"}},{types:["tag","selector","keyword"],style:{color:"#00009f"}}]}}}]);