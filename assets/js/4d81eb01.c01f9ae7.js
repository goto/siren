(self.webpackChunksiren=self.webpackChunksiren||[]).push([[9616],{1410:function(e,t,r){var n=r(7694),i=r(3618);e.exports={title:"Siren",tagline:"Universal data observability toolkit",url:"https://odpf.github.io",baseUrl:"/siren/",onBrokenLinks:"throw",onBrokenMarkdownLinks:"warn",favicon:"img/favicon.ico",organizationName:"odpf",projectName:"siren",customFields:{apiVersion:"v1beta1",defaultHost:"http://localhost:8080"},themeConfig:{colorMode:{defaultMode:"light",respectPrefersColorScheme:!0,switchConfig:{darkIcon:"\u263e",lightIcon:"\u2600\ufe0f"}},navbar:{title:"Siren",logo:{src:"img/logo.svg"},items:[{type:"doc",docId:"introduction",position:"left",label:"Docs"},{to:"/blog",label:"Blog",position:"left"},{to:"/help",label:"Help",position:"left"},{href:"https://bit.ly/2RzPbtn",position:"right",className:"header-slack-link"},{href:"https://github.com/odpf/siren",className:"navbar-item-github",position:"right"}]},footer:{style:"light",links:[{title:"Products",items:[{label:"Meteor",href:"https://github.com/odpf/meteor"},{label:"Firehose",href:"https://github.com/odpf/firehose"},{label:"Raccoon",href:"https://github.com/odpf/raccoon"},{label:"Dagger",href:"https://odpf.github.io/dagger/"}]},{title:"Resources",items:[{label:"Docs",to:"/docs/introduction"},{label:"Blog",to:"/blog"},{label:"Help",to:"/help"}]},{title:"Community",items:[{label:"Slack",href:"https://bit.ly/2RzPbtn"},{label:"GitHub",href:"https://github.com/odpf/siren"}]}],copyright:"Copyright \xa9 2022-"+(new Date).getFullYear()+" ODPF"},prism:{theme:n,darkTheme:i},gtag:{trackingID:"G-XXX"},announcementBar:{id:"star-repo",content:'\u2b50\ufe0f If you like Siren, give it a star on <a target="_blank" rel="noopener noreferrer" href="https://github.com/odpf/siren">GitHub</a>! \u2b50',backgroundColor:"#222",textColor:"#eee",isCloseable:!0}},presets:[["@docusaurus/preset-classic",{docs:{showLastUpdateAuthor:!0,showLastUpdateTime:!0,sidebarPath:6679,editUrl:"https://github.com/odpf/siren/edit/master/docs/"},blog:{showReadingTime:!0,editUrl:"https://github.com/odpf/siren/edit/master/docs/blog/"},theme:{customCss:[5308,2295]}}]]}},8215:function(e,t,r){"use strict";var n=r(7294);t.Z=function(e){var t=e.children,r=e.hidden,i=e.className;return n.createElement("div",{role:"tabpanel",hidden:r,className:i},t)}},5064:function(e,t,r){"use strict";r.d(t,{Z:function(){return c}});var n=r(7294),i=r(9443);var o=function(){var e=(0,n.useContext)(i.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},a=r(6010),s="tabItem_vU9c",l="tabItemActive_cw6a";var c=function(e){var t,r=e.lazy,i=e.block,c=e.defaultValue,u=e.values,p=e.groupId,d=e.className,m=n.Children.toArray(e.children),g=null!=u?u:m.map((function(e){return{value:e.props.value,label:e.props.label}})),b=null!=c?c:null==(t=m.find((function(e){return e.props.default})))?void 0:t.props.value,f=o(),h=f.tabGroupChoices,y=f.setTabGroupChoices,v=(0,n.useState)(b),k=v[0],N=v[1],w=[];if(null!=p){var C=h[p];null!=C&&C!==k&&g.some((function(e){return e.value===C}))&&N(C)}var _=function(e){var t=e.currentTarget,r=w.indexOf(t),n=g[r].value;N(n),null!=p&&(y(p,n),setTimeout((function(){var e,r,n,i,o,a,s,c;(e=t.getBoundingClientRect(),r=e.top,n=e.left,i=e.bottom,o=e.right,a=window,s=a.innerHeight,c=a.innerWidth,r>=0&&o<=c&&i<=s&&n>=0)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(l),setTimeout((function(){return t.classList.remove(l)}),2e3))}),150))},T=function(e){var t,r=null;switch(e.key){case"ArrowRight":var n=w.indexOf(e.target)+1;r=w[n]||w[0];break;case"ArrowLeft":var i=w.indexOf(e.target)-1;r=w[i]||w[w.length-1]}null==(t=r)||t.focus()};return n.createElement("div",{className:"tabs-container"},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":i},d)},g.map((function(e){var t=e.value,r=e.label;return n.createElement("li",{role:"tab",tabIndex:k===t?0:-1,"aria-selected":k===t,className:(0,a.Z)("tabs__item",s,{"tabs__item--active":k===t}),key:t,ref:function(e){return w.push(e)},onKeyDown:T,onFocus:_,onClick:_},null!=r?r:t)}))),r?(0,n.cloneElement)(m.filter((function(e){return e.props.value===k}))[0],{className:"margin-vert--md"}):n.createElement("div",{className:"margin-vert--md"},m.map((function(e,t){return(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==k})}))))}},6679:function(e){e.exports={docsSidebar:["introduction",{type:"category",label:"Tour",items:["tour/introduction","tour/startup_siren_server","tour/registering_provider","tour/registering_receivers","tour/sending_notifications_to_receiver","tour/configuring_provider_alerting_rules","tour/subscribing_notifications"]},{type:"category",label:"Concepts",items:["concepts/overview","concepts/plugin","concepts/schema"]},{type:"category",label:"Guides",items:["guides/overview","guides/provider_and_namespace","guides/receiver","guides/subscription","guides/rule","guides/template","guides/alert_history","guides/notification","guides/deployment"]},{type:"category",label:"Contribute",items:["contribute/contribution","contribute/receiver","contribute/provider","contribute/release"]},{type:"category",label:"Reference",items:["reference/api","reference/server_configuration","reference/client_configuration","reference/receiver","reference/cli"]}]}},6746:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return d},contentTitle:function(){return m},metadata:function(){return g},toc:function(){return b},apiVersion:function(){return f},defaultHost:function(){return h},default:function(){return v}});var n=r(7462),i=r(3366),o=(r(7294),r(3905)),a=r(5064),s=r(8215),l=r(6213),c=r(1410),u=r.n(c),p=["components"],d={},m="6 - Subscribing Notifications",g={unversionedId:"tour/subscribing_notifications",id:"tour/subscribing_notifications",isDocsHomePage:!1,title:"6 - Subscribing Notifications",description:"export const apiVersion = siteConfig.customFields.apiVersion",source:"@site/docs/tour/6_subscribing_notifications.md",sourceDirName:"tour",slug:"/tour/subscribing_notifications",permalink:"/siren/docs/tour/subscribing_notifications",editUrl:"https://github.com/odpf/siren/edit/master/docs/docs/tour/6_subscribing_notifications.md",tags:[],version:"current",lastUpdatedBy:"Ravi Suhag",lastUpdatedAt:1666359878,formattedLastUpdatedAt:"10/21/2022",sidebarPosition:6,frontMatter:{},sidebar:"docsSidebar",previous:{title:"5 - Configuring Provider Alerting Rules",permalink:"/siren/docs/tour/configuring_provider_alerting_rules"},next:{title:"Overview",permalink:"/siren/docs/concepts/overview"}},b=[],f=u().customFields.apiVersion,h=u().customFields.defaultHost,y={toc:b,apiVersion:f};function v(e){var t=e.components,r=(0,i.Z)(e,p);return(0,o.kt)("wrapper",(0,n.Z)({},y,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"6---subscribing-notifications"},"6 - Subscribing Notifications"),(0,o.kt)("p",null,"Notifications can be subscribed and routed to the defined receivers by adding a subscription. In this part, we will simulate how Cortex Ruler trigger an alert to Cortex Alertmanager, and Cortex Alertmanager trigger webhook-notification and calling Siren alerts hook API. On Siren side, we expect a notification is published everytime the hook API is being called."),(0,o.kt)("p",null,"In this part we will create alerting rules for our Cortex monitoring provider. Rules in Siren relies on ",(0,o.kt)("a",{parentName:"p",href:"/siren/docs/guides/template"},"template")," for its abstraction. We need to create a rule's template first before uploading a rule."),(0,o.kt)("p",null,"The first thing that we should do is knowing what would be the labels sent by Cortex Alertmanager. The labels should be defined when we were defining ",(0,o.kt)("a",{parentName:"p",href:"/siren/docs/tour/configuring_provider_alerting_rules#creating-a-rule"},"rules"),". Assuming the labels sent by Cortex Alertmanager are these:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"severity: WARNING\nteam: odpf\nservice: some-service\nenvironment: integration\nresource_name: some-resource\n")),(0,o.kt)("p",null,"Later we will try to simulate triggering alert by calling Cortex Alertmanager ",(0,o.kt)("inlineCode",{parentName:"p"},"POST /alerts")," API directly. The way Cortex Ruler monitor a specific metric and trigger an alert to Cortex Alertmanager are out of this ",(0,o.kt)("inlineCode",{parentName:"p"},"tour")," scope."),(0,o.kt)("p",null,"We want to subscribe all notifications owned by ",(0,o.kt)("inlineCode",{parentName:"p"},"odpf")," team and has severity ",(0,o.kt)("inlineCode",{parentName:"p"},"WARNING")," regardless the service name related with the alerts and route the notification to ",(0,o.kt)("inlineCode",{parentName:"p"},"file")," with receiver id ",(0,o.kt)("inlineCode",{parentName:"p"},"1")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"2"),". Currently there is no CLI to create a subscription (this would need to be added in the future) so we could call Siren HTTP API direclty to create one."),(0,o.kt)("p",null,"Prepare a subscription detail:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cat <<EOT >> cpu_subs.yaml\nurn: subscribe-cpu-odpf-warning\nnamespace: 1\nreceivers:\n  - id: 1\n  - id: 2\nmatch\n  team: odpf\n  severity: WARNING\nEOT\n")),(0,o.kt)(a.Z,{groupId:"api",mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"./siren subscription create --file cpu_subs.yaml\n"))),(0,o.kt)(s.Z,{value:"http",label:"HTTP",mdxType:"TabItem"},(0,o.kt)(l.Z,{className:"language-bash",mdxType:"CodeBlock"},"$ curl --request POST\n  --url ",h,"/",f,'/subscriptions\'\n--header \'Content-Type: application/json\'\n--header \'Accept: application/json\'\n--data-raw \'{\n  "urn": "subscribe-cpu-odpf-warning",\n  "namespace": 1,\n  "receivers": [\n    {\n      "id": 1\n    },\n    {\n      "id": 2\n    }\n  ],\n  "match": {\n    "team": "odpf",\n    "severity": "WARNING"\n  }\n}\''))),(0,o.kt)("p",null,"Once a subscription is created, let's simulate on how Cortex Ruler trigger an alert by calling Cortex Alertmanager API directly with this cURL."),(0,o.kt)(a.Z,{groupId:"api",mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"http",label:"HTTP",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'curl --location --request POST \'http://localhost:9009/api/prom/alertmanager/api/v1/alerts\'\n--header \'X-Scope-OrgId: odpf-ns\'\n--header \'Content-Type: application/json\' \\\n--data-raw \'[\n    {\n        "state": "firing",\n        "value": 1,\n        "labels": {\n            "severity": "WARNING",\n            "team": "odpf",\n            "service": "some-service",\n            "environment": "integration"\n        },\n        "annotations": {\n            "resource": "test_alert",\n            "metricName": "test_alert",\n            "metricValue": "1",\n            "template": "alert_test"\n        }\n    }\n]\'\n')))),(0,o.kt)("p",null,"If succeed, the response should be like this."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{"status":"success"}\n')),(0,o.kt)("p",null,"Now, we need to expect Cortex Alertmanager send alerts to our Siren API ",(0,o.kt)("inlineCode",{parentName:"p"},"/alerts/cortex/:providerId"),". If that is the case, the alert should also be stored and published to the receivers in the matching subscriptions. You might want to wait for a Cortex Alertmanager ",(0,o.kt)("inlineCode",{parentName:"p"},"group_wait")," (usually 30s) until alerts are triggered by Cortex Alertmanager."),(0,o.kt)("p",null,"Let's verify the alert is stored inside our DB."),(0,o.kt)(a.Z,{groupId:"api",mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"./siren alert list --provider-id 1 --provider-type cortex --resource-name test_alert\n")),(0,o.kt)("p",null,"The result would be something like this."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"Showing 1 of 1 alerts\n \nID      PROVIDER_ID     RESOURCE_NAME   METRIC_NAME     METRIC_VALUE    SEVERITY\n1       1               test_alert      test_alert      1               WARNING \n\nFor details on a alert, try: siren alert view <id>\n"))),(0,o.kt)(s.Z,{value:"http",label:"HTTP",mdxType:"TabItem"},(0,o.kt)(l.Z,{className:"language-bash",mdxType:"CodeBlock"},"$ curl --request GET\n  --url ",h,"/",f,"/alerts?providerId=1&providerType=cortex&resourceName=test_alert"))),(0,o.kt)("p",null,"We also expect notifications have been published to the receiver id ",(0,o.kt)("inlineCode",{parentName:"p"},"1")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"2")," similar with the ",(0,o.kt)("a",{parentName:"p",href:"/siren/docs/tour/sending_notifications_to_receiver"},"previous part"),". You can check a new notification is already added in ",(0,o.kt)("inlineCode",{parentName:"p"},"./out-file-sink1.json")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"./out-file-sink2.json")," with this value."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{"environment":"integration","generatorUrl":"","groupKey":"{}:{severity=\\"WARNING\\"}","metricName":"test_alert","metricValue":"1","numAlertsFiring":1,"resource":"test_alert","routing_method":"subscribers","service":"some-service","severity":"WARNING","status":"firing","team":"odpf","template":"alert_test"}\n')))}v.isMDXComponent=!0},3618:function(e,t,r){"use strict";r.r(t);t.default={plain:{color:"#F8F8F2",backgroundColor:"#282A36"},styles:[{types:["prolog","constant","builtin"],style:{color:"rgb(189, 147, 249)"}},{types:["inserted","function"],style:{color:"rgb(80, 250, 123)"}},{types:["deleted"],style:{color:"rgb(255, 85, 85)"}},{types:["changed"],style:{color:"rgb(255, 184, 108)"}},{types:["punctuation","symbol"],style:{color:"rgb(248, 248, 242)"}},{types:["string","char","tag","selector"],style:{color:"rgb(255, 121, 198)"}},{types:["keyword","variable"],style:{color:"rgb(189, 147, 249)",fontStyle:"italic"}},{types:["comment"],style:{color:"rgb(98, 114, 164)"}},{types:["attr-name"],style:{color:"rgb(241, 250, 140)"}}]}},7694:function(e,t,r){"use strict";r.r(t);t.default={plain:{color:"#393A34",backgroundColor:"#f6f8fa"},styles:[{types:["comment","prolog","doctype","cdata"],style:{color:"#999988",fontStyle:"italic"}},{types:["namespace"],style:{opacity:.7}},{types:["string","attr-value"],style:{color:"#e3116c"}},{types:["punctuation","operator"],style:{color:"#393A34"}},{types:["entity","url","symbol","number","boolean","variable","constant","property","regex","inserted"],style:{color:"#36acaa"}},{types:["atrule","keyword","attr-name","selector"],style:{color:"#00a4db"}},{types:["function","deleted","tag"],style:{color:"#d73a49"}},{types:["function-variable"],style:{color:"#6f42c1"}},{types:["tag","selector","keyword"],style:{color:"#00009f"}}]}}}]);