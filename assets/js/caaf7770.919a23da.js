"use strict";(self.webpackChunksiren=self.webpackChunksiren||[]).push([[119],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),p=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=p(n),d=a,h=m["".concat(o,".").concat(d)]||m[d]||c[d]||l;return n?r.createElement(h,i(i({ref:t},u),{},{components:n})):r.createElement(h,i({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<l;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5667:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var r=n(3117),a=(n(7294),n(3905));const l={},i="Server Installation",s={unversionedId:"guides/deployment",id:"guides/deployment",title:"Server Installation",description:"There are several approaches to setup Siren Server",source:"@site/docs/guides/deployment.md",sourceDirName:"guides",slug:"/guides/deployment",permalink:"/siren/docs/guides/deployment",draft:!1,editUrl:"https://github.com/odpf/siren/edit/master/docs/docs/guides/deployment.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Overview",permalink:"/siren/docs/guides/overview"},next:{title:"Provider and Namespace",permalink:"/siren/docs/guides/provider_and_namespace"}},o={},p=[{value:"General pre-requisites",id:"general-pre-requisites",level:2},{value:"Using the CLI",id:"using-the-cli",level:2},{value:"Pre-requisites for CLI",id:"pre-requisites-for-cli",level:3},{value:"Use the Docker",id:"use-the-docker",level:2},{value:"Using environment variables",id:"using-environment-variables",level:3},{value:"Using config file",id:"using-config-file",level:3},{value:"Use the Helm chart",id:"use-the-helm-chart",level:2},{value:"Pre-requisites for Helm chart",id:"pre-requisites-for-helm-chart",level:3},{value:"Add ODPF Helm repository",id:"add-odpf-helm-repository",level:3},{value:"Setup helm values",id:"setup-helm-values",level:3}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"server-installation"},"Server Installation"),(0,a.kt)("p",null,"There are several approaches to setup Siren Server"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#using-the-cli"},"Using the CLI")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#use-the-docker-image"},"Using the Docker")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#use-the-helm-chart"},"Using the Helm Chart"))),(0,a.kt)("h2",{id:"general-pre-requisites"},"General pre-requisites"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"PostgreSQL (version 13 or above)"),(0,a.kt)("li",{parentName:"ul"},"Monitoring Providers",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Ex: CortexMetrics")))),(0,a.kt)("h2",{id:"using-the-cli"},"Using the CLI"),(0,a.kt)("h3",{id:"pre-requisites-for-cli"},"Pre-requisites for CLI"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/siren/docs/tour/setup_server#initialization"},"Create siren config file"))),(0,a.kt)("p",null,"To run the Siren server use command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"$ siren server start -c <path-to-config>\n")),(0,a.kt)("h2",{id:"use-the-docker"},"Use the Docker"),(0,a.kt)("p",null,"To run the Siren server using Docker, you need to have Docker installed on your system. You can find the installation instructions ",(0,a.kt)("a",{parentName:"p",href:"https://docs.docker.com/get-docker/"},"here"),"."),(0,a.kt)("p",null,"You can choose to set the configuration using environment variables or a config file. The environment variables will override the config file."),(0,a.kt)("h3",{id:"using-environment-variables"},"Using environment variables"),(0,a.kt)("p",null,"All the configs can be passed as environment variables using underscore ",(0,a.kt)("inlineCode",{parentName:"p"},"_")," as the delimiter between nested keys. See the following examples"),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"/siren/docs/reference/server_configuration"},"configuration reference")," for the list of all the configuration keys."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title=".env"',title:'".env"'},"DB_DRIVER=postgres\nDB_URL=postgres://postgres:@localhost:5432/siren_development?sslmode=disable\nSERVICE_PORT=8080\nSERVICE_ENCRYPTION_KEY=<32 characters encryption key>\n")),(0,a.kt)("p",null,"Run the following command to start the server"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"$ docker run -d \\\n    --restart=always \\\n    -p 8080:8080 \\\n    --env-file .env \\\n    --name siren-server \\\n    odpf/siren:<version> \\\n    server start\n")),(0,a.kt)("h3",{id:"using-config-file"},"Using config file"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="config.yaml"',title:'"config.yaml"'},"db:\n  driver: postgres\n  url: postgres://postgres:@localhost:5432/siren_integration?sslmode=disable\nservice:\n  port: 8080\n  encryption_key: <32 characters encryption key>\n")),(0,a.kt)("p",null,"Run the following command to start the server"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"$ docker run -d \\\n    --restart=always \\\n    -p 8080:8080 \\\n    -v $(pwd)/config.yaml:/config.yaml \\\n    --name siren-server \\\n    odpf/siren:<version> \\\n    server start -c /config.yaml\n")),(0,a.kt)("h2",{id:"use-the-helm-chart"},"Use the Helm chart"),(0,a.kt)("h3",{id:"pre-requisites-for-helm-chart"},"Pre-requisites for Helm chart"),(0,a.kt)("p",null,"Siren can be installed in Kubernetes using the Helm chart from ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/odpf/charts"},"https://github.com/odpf/charts"),"."),(0,a.kt)("p",null,"Ensure that the following requirements are met:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Kubernetes 1.14+"),(0,a.kt)("li",{parentName:"ul"},"Helm version 3.x is ",(0,a.kt)("a",{parentName:"li",href:"https://helm.sh/docs/intro/install/"},"installed"))),(0,a.kt)("h3",{id:"add-odpf-helm-repository"},"Add ODPF Helm repository"),(0,a.kt)("p",null,"Add ODPF chart repository to Helm:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"helm repo add odpf https://odpf.github.io/charts/\n")),(0,a.kt)("p",null,"You can update the chart repository by running:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"helm repo update\n")),(0,a.kt)("h3",{id:"setup-helm-values"},"Setup helm values"),(0,a.kt)("p",null,"The following table lists the configurable parameters of the Siren chart and their default values."),(0,a.kt)("p",null,"See full helm values guide ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/odpf/charts/tree/main/stable/siren#values"},"here"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="values.yaml"',title:'"values.yaml"'},'app:\n\n  ## Value to fully override guardian.name template\n  nameOverride: ""\n  ## Value to fully override guardian.fullname template\n  fullnameOverride: ""\n\n  image:\n    repository: odpf/siren\n    pullPolicy: Always\n    tag: latest\n  container:\n    args:\n      - server\n      - start\n    livenessProbe:\n      httpGet:\n        path: /ping\n        port: tcp\n    readinessProbe:\n      httpGet:\n        path: /ping\n        port: tcp\n\n  migration:\n    enabled: true\n    args:\n      - server\n      - migrate\n\n  service:\n    annotations:\n      projectcontour.io/upstream-protocol.h2c: tcp\n\n  ingress:\n    enabled: true\n    annotations:\n      kubernetes.io/ingress.class: contour\n    hosts:\n      - host: siren.example.com\n        paths:\n          - path: /\n            pathType: ImplementationSpecific\n            backend:\n              service:\n                # name: backend_01\n                port:\n                  number: 8080\n\n  config:\n    LOG_LEVEL: info\n    SERVICE_PORT: 8080\n\n  secretConfig:\n    ENCRYPTION_SECRET_KEY:\n    NOTIFIER_ACCESS_TOKEN:\n    DB_URL: postgres://siren:<password>@localhost:5432/siren_integration?sslmode=disable\n')),(0,a.kt)("p",null,"And install it with the helm command line along with the values file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"$ helm install my-release -f values.yaml odpf/siren\n")))}c.isMDXComponent=!0}}]);