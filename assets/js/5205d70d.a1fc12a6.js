"use strict";(self.webpackChunksiren=self.webpackChunksiren||[]).push([[254],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return g}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=s(t),g=i,f=d["".concat(l,".").concat(g)]||d[g]||p[g]||o;return t?r.createElement(f,a(a({ref:n},u),{},{components:t})):r.createElement(f,a({ref:n},u))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=d;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:i,a[1]=c;for(var s=2;s<o;s++)a[s]=t[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1221:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return u},default:function(){return d}});var r=t(7462),i=t(3366),o=(t(7294),t(3905)),a=["components"],c={},l="HTTP Client",s={unversionedId:"guides/client",id:"guides/client",isDocsHomePage:!1,title:"HTTP Client",description:"The client directory holds the HTTP Client for siren service. It's generated using",source:"@site/docs/guides/client.md",sourceDirName:"guides",slug:"/guides/client",permalink:"/siren/docs/guides/client",editUrl:"https://github.com/odpf/siren/edit/master/docs/docs/guides/client.md",tags:[],version:"current",lastUpdatedBy:"Ravi Suhag",lastUpdatedAt:1639651289,formattedLastUpdatedAt:"12/16/2021",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Templates",permalink:"/siren/docs/guides/templates"},next:{title:"Alert credentials management",permalink:"/siren/docs/guides/alert_credentials"}},u=[],p={toc:u};function d(e){var n=e.components,t=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"http-client"},"HTTP Client"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"client")," directory holds the HTTP Client for siren service. It's generated using\nproject ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/swagger-api/swagger-codegen"},"swagger-codegen")," with ",(0,o.kt)("inlineCode",{parentName:"p"},"swagger.yaml")," file which can be found at\nthe root."),(0,o.kt)("p",null,"This client is used by command line interface to parse YAML files and call the HTTP APIs of Siren service to create or\nupdate templates and rules."),(0,o.kt)("p",null,"Ideally we should generate the client on any changes in the swagger spec of siren service."),(0,o.kt)("p",null,"The config used for client generation is ",(0,o.kt)("inlineCode",{parentName:"p"},"client_config.json")),(0,o.kt)("p",null,"To generate the client, run"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ swagger-codegen generate -i api/handlers/swagger.yaml -l go -o client -c client_config.json\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Sample usage")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "context"\n    "encoding/json"\n    "fmt"\n    "github.com/antihax/optional"\n    "github.com/odpf/siren/client"\n)\n\nfunc main() {\n    cfg := &client.Configuration{\n        BasePath: "http://localhost:3000",\n    }\n    x := client.NewAPIClient(cfg)\n    options := &client.RulesApiListRulesRequestOpts{\n        Namespace: optional.NewString("n1"),\n    }\n    result, _, err := x.RulesApi.ListRulesRequest(context.Background(), options)\n    if err != nil {\n        panic(err)\n    }\n    response, _ := json.Marshal(result)\n    fmt.Println(string(response))\n}\n')))}d.isMDXComponent=!0}}]);