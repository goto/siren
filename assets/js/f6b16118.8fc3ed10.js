(self.webpackChunksiren=self.webpackChunksiren||[]).push([[580],{1410:(e,t,r)=>{const a=r(7694),n=r(3618);e.exports={title:"Siren",tagline:"Universal data observability toolkit",url:"https://odpf.github.io",baseUrl:"/siren/",onBrokenLinks:"throw",onBrokenMarkdownLinks:"warn",favicon:"img/favicon.ico",organizationName:"odpf",projectName:"siren",customFields:{apiVersion:"v1beta1",defaultHost:"http://localhost:8080"},presets:[["@docusaurus/preset-classic",{docs:{sidebarPath:6679,editUrl:"https://github.com/odpf/siren/edit/master/docs/",sidebarCollapsed:!0,breadcrumbs:!1},blog:!1,theme:{customCss:[5308,2295]},gtag:{trackingID:"G-EPXDLH6V72"}}]],themeConfig:{colorMode:{defaultMode:"light",respectPrefersColorScheme:!0},navbar:{title:"Siren",logo:{src:"img/logo.svg"},hideOnScroll:!0,items:[{type:"doc",docId:"introduction",position:"right",label:"Docs"},{to:"docs/support",label:"Support",position:"right"},{href:"https://bit.ly/2RzPbtn",position:"right",className:"header-slack-link"},{href:"https://github.com/odpf/siren",className:"navbar-item-github",position:"right"}]},footer:{style:"light",links:[]},prism:{theme:a,darkTheme:n},announcementBar:{id:"star-repo",content:'\u2b50\ufe0f If you like Siren, give it a star on <a target="_blank" rel="noopener noreferrer" href="https://github.com/odpf/siren">GitHub</a>! \u2b50',backgroundColor:"#222",textColor:"#eee",isCloseable:!0}}}},5162:(e,t,r)=>{"use strict";r.d(t,{Z:()=>s});var a=r(7294),n=r(4334);const o="tabItem_Ymn6";function s(e){let{children:t,hidden:r,className:s}=e;return a.createElement("div",{role:"tabpanel",className:(0,n.Z)(o,s),hidden:r},t)}},5488:(e,t,r)=>{"use strict";r.d(t,{Z:()=>m});var a=r(3117),n=r(7294),o=r(4334),s=r(2389),l=r(7392),i=r(7094),c=r(2466);const p="tabList__CuJ",d="tabItem_LNqP";function u(e){var t;const{lazy:r,block:s,defaultValue:u,values:m,groupId:g,className:v}=e,b=n.Children.map(e.children,(e=>{if((0,n.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=m??b.map((e=>{let{props:{value:t,label:r,attributes:a}}=e;return{value:t,label:r,attributes:a}})),y=(0,l.l)(h,((e,t)=>e.value===t.value));if(y.length>0)throw new Error(`Docusaurus error: Duplicate values "${y.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const f=null===u?u:u??(null==(t=b.find((e=>e.props.default)))?void 0:t.props.value)??b[0].props.value;if(null!==f&&!h.some((e=>e.value===f)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${f}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:k,setTabGroupChoices:T}=(0,i.U)(),[N,w]=(0,n.useState)(f),x=[],{blockElementScrollPositionUntilNextRender:C}=(0,c.o5)();if(null!=g){const e=k[g];null!=e&&e!==N&&h.some((t=>t.value===e))&&w(e)}const I=e=>{const t=e.currentTarget,r=x.indexOf(t),a=h[r].value;a!==N&&(C(t),w(a),null!=g&&T(g,String(a)))},_=e=>{var t;let r=null;switch(e.key){case"Enter":I(e);break;case"ArrowRight":{const t=x.indexOf(e.currentTarget)+1;r=x[t]??x[0];break}case"ArrowLeft":{const t=x.indexOf(e.currentTarget)-1;r=x[t]??x[x.length-1];break}}null==(t=r)||t.focus()};return n.createElement("div",{className:(0,o.Z)("tabs-container",p)},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":s},v)},h.map((e=>{let{value:t,label:r,attributes:s}=e;return n.createElement("li",(0,a.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:e=>x.push(e),onKeyDown:_,onClick:I},s,{className:(0,o.Z)("tabs__item",d,null==s?void 0:s.className,{"tabs__item--active":N===t})}),r??t)}))),r?(0,n.cloneElement)(b.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):n.createElement("div",{className:"margin-top--md"},b.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function m(e){const t=(0,s.Z)();return n.createElement(u,(0,a.Z)({key:String(t)},e))}},6679:e=>{e.exports={docsSidebar:["introduction","installation",{type:"category",label:"Tour",items:["tour/overview","tour/start_server","tour/registering_provider","tour/registering_receivers","tour/sending_notifications_to_receiver","tour/configuring_provider_alerting_rules","tour/subscribing_notifications"]},{type:"category",label:"Concepts",items:["concepts/overview","concepts/plugin","concepts/schema"]},{type:"category",label:"Guides",items:["guides/overview","guides/provider_and_namespace","guides/receiver","guides/subscription","guides/rule","guides/template","guides/alert_history","guides/notification","guides/deployment"]},{type:"category",label:"Contribute",items:["contribute/contribution","contribute/receiver","contribute/provider","contribute/release"]},{type:"category",label:"Reference",items:["reference/api","reference/server_configuration","reference/client_configuration","reference/receiver","reference/cli"]}]}},8096:(e,t,r)=>{"use strict";r.r(t),r.d(t,{apiVersion:()=>v,assets:()=>m,contentTitle:()=>d,default:()=>y,defaultHost:()=>b,frontMatter:()=>p,metadata:()=>u,toc:()=>g});var a=r(3117),n=(r(7294),r(3905)),o=r(5488),s=r(5162),l=r(6066),i=r(1410),c=r.n(i);const p={},d="Register provider",u={unversionedId:"tour/registering_provider",id:"tour/registering_provider",title:"Register provider",description:"1. Register the provider",source:"@site/docs/tour/2_registering_provider.md",sourceDirName:"tour",slug:"/tour/registering_provider",permalink:"/siren/docs/tour/registering_provider",draft:!1,editUrl:"https://github.com/odpf/siren/edit/master/docs/docs/tour/2_registering_provider.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"docsSidebar",previous:{title:"Start Server",permalink:"/siren/docs/tour/start_server"},next:{title:"Register receivers",permalink:"/siren/docs/tour/registering_receivers"}},m={},g=[{value:"1. Register the provider",id:"1-register-the-provider",level:2},{value:"2. Register namespaces",id:"2-register-namespaces",level:2},{value:"3. Verify Created Providers and Namespaces",id:"3-verify-created-providers-and-namespaces",level:2}],v=c().customFields.apiVersion,b=c().customFields.defaultHost,h={toc:g,apiVersion:v};function y(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},h,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"register-provider"},"Register provider"),(0,n.kt)("h2",{id:"1-register-the-provider"},"1. Register the provider"),(0,n.kt)("p",null,"The first things we need to set up before we add receivers and testing alerts and notifications are we need to register our ",(0,n.kt)("a",{parentName:"p",href:"https://cortexmetrics.io/"},"Cortexmetrics")," as provider and its namespaces."),(0,n.kt)("p",null,"Siren provides HTTP API where we need to send a request to ",(0,n.kt)("inlineCode",{parentName:"p"},"POST /v1beta1/providers")," with a json body to create a provider. Beside that, Siren also has a CLI that interacts to Siren server and we could use it."),(0,n.kt)("p",null,"To create a new provider with CLI, we need to create a ",(0,n.kt)("inlineCode",{parentName:"p"},"yaml")," file."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"# input.yaml\nhost: http://localhost:9009\nurn: localhost-dev-cortex\nname: dev-cortex\ntype: cortex\n")),(0,n.kt)("p",null,"If you are in unix system, you could do this"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"cat <<EOT >> input.yaml\nhost: http://localhost:9009\nurn: localhost-dev-cortex\nname: dev-cortex\ntype: cortex\nEOT\n")),(0,n.kt)("p",null,"Once the file is ready, we can start creating the provider."),(0,n.kt)(o.Z,{groupId:"api",mdxType:"Tabs"},(0,n.kt)(s.Z,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"siren provider create --file input.yaml\n")),(0,n.kt)("p",null,"If succeed, you will got this message."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"Provider created with id: 1 \u2713\n"))),(0,n.kt)(s.Z,{value:"http",label:"HTTP",mdxType:"TabItem"},(0,n.kt)(l.Z,{className:"language-bash",mdxType:"CodeBlock"},"$ curl --request POST\n  --url ",b,"/",v,'/providers\n  --header \'content-type: application/json\'\n  --data-raw \'{\n    "host": "http://localhost:9009",\n    "urn": "localhost-dev-cortex",\n    "name": "dev-cortex",\n    "type": "cortex"\n}\''))),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"id")," we got from the provider creation is important to create a namespace later."),(0,n.kt)("h2",{id:"2-register-namespaces"},"2. Register namespaces"),(0,n.kt)("p",null,"For multi-tenancy scenario, which Cortex supports, we need to define namespaces in Siren. Assuming there are 2 tenants in Cortex, ",(0,n.kt)("inlineCode",{parentName:"p"},"odpf")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"non-odpf"),", we need to create 2 namespaces. This could be done similar with how we created provider."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"cat <<EOT >> ns1.yaml\nurn: odpf-ns\nname: odpf-ns\nprovider:\n    id: 1\nEOT\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"cat <<EOT >> ns2.yaml\nurn: non-odpf-ns\nname: non-odpf-ns\nprovider:\n    id: 1\nEOT\n")),(0,n.kt)(o.Z,{groupId:"api",mdxType:"Tabs"},(0,n.kt)(s.Z,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"./siren namespace create -f ns1.yaml\n"))),(0,n.kt)(s.Z,{value:"http",label:"HTTP",mdxType:"TabItem"},(0,n.kt)(l.Z,{className:"language-bash",mdxType:"CodeBlock"},"$ curl --request POST\n  --url ",b,"/",v,'/namespaces\n  --header \'content-type: application/json\'\n  --data-raw \'{\n    "urn": "odpf-ns",\n    "name": "odpf-ns",\n    "provider": {\n        "id": 1\n    }\n}\''))),(0,n.kt)(o.Z,{groupId:"api",mdxType:"Tabs"},(0,n.kt)(s.Z,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"./siren namespace create -f ns2.yaml\n"))),(0,n.kt)(s.Z,{value:"http",label:"HTTP",mdxType:"TabItem"},(0,n.kt)(l.Z,{className:"language-bash",mdxType:"CodeBlock"},"$ curl --request POST\n  --url ",b,"/",v,'/namespaces\n  --header \'content-type: application/json\'\n  --data-raw \'{\n    "urn": "non-odpf-ns",\n    "name": "non-odpf-ns",\n    "provider": {\n        "id": 2\n    }\n}\''))),(0,n.kt)("h2",{id:"3-verify-created-providers-and-namespaces"},"3. Verify Created Providers and Namespaces"),(0,n.kt)("p",null,"To make sure all providers and namespaces are properly created, we could try query Siren with Siren CLI."),(0,n.kt)("p",null,"See what providers exist in Siren."),(0,n.kt)(o.Z,{groupId:"api",mdxType:"Tabs"},(0,n.kt)(s.Z,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"./siren provider list\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"Showing 2 of 2 providers\n\nID      TYPE    URN                     NAME\n1       cortex  localhost-dev-cortex    dev-cortex\n\nFor details on a provider, try: siren provider view <id>\n"))),(0,n.kt)(s.Z,{value:"http",label:"HTTP",mdxType:"TabItem"},(0,n.kt)(l.Z,{className:"language-bash",mdxType:"CodeBlock"},"$ curl --request GET\n  --url ",b,"/",v,"/providers'"))),(0,n.kt)("p",null,"See what namespaces exist in Siren."),(0,n.kt)(o.Z,{groupId:"api",mdxType:"Tabs"},(0,n.kt)(s.Z,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"./siren namespace list\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"Showing 2 of 2 namespaces\n\nID      URN             NAME\n1       odpf-ns         odpf-ns\n2       non-odpf-ns     non-odpf-ns\n\nFor details on a namespace, try: siren namespace view <id>\n"))),(0,n.kt)(s.Z,{value:"http",label:"HTTP",mdxType:"TabItem"},(0,n.kt)(l.Z,{className:"language-bash",mdxType:"CodeBlock"},"$ curl --request GET\n  --url ",b,"/",v,"/namespaces'"))))}y.isMDXComponent=!0},3618:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>a});const a={plain:{color:"#F8F8F2",backgroundColor:"#282A36"},styles:[{types:["prolog","constant","builtin"],style:{color:"rgb(189, 147, 249)"}},{types:["inserted","function"],style:{color:"rgb(80, 250, 123)"}},{types:["deleted"],style:{color:"rgb(255, 85, 85)"}},{types:["changed"],style:{color:"rgb(255, 184, 108)"}},{types:["punctuation","symbol"],style:{color:"rgb(248, 248, 242)"}},{types:["string","char","tag","selector"],style:{color:"rgb(255, 121, 198)"}},{types:["keyword","variable"],style:{color:"rgb(189, 147, 249)",fontStyle:"italic"}},{types:["comment"],style:{color:"rgb(98, 114, 164)"}},{types:["attr-name"],style:{color:"rgb(241, 250, 140)"}}]}},7694:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>a});const a={plain:{color:"#393A34",backgroundColor:"#f6f8fa"},styles:[{types:["comment","prolog","doctype","cdata"],style:{color:"#999988",fontStyle:"italic"}},{types:["namespace"],style:{opacity:.7}},{types:["string","attr-value"],style:{color:"#e3116c"}},{types:["punctuation","operator"],style:{color:"#393A34"}},{types:["entity","url","symbol","number","boolean","variable","constant","property","regex","inserted"],style:{color:"#36acaa"}},{types:["atrule","keyword","attr-name","selector"],style:{color:"#00a4db"}},{types:["function","deleted","tag"],style:{color:"#d73a49"}},{types:["function-variable"],style:{color:"#6f42c1"}},{types:["tag","selector","keyword"],style:{color:"#00009f"}}]}}}]);