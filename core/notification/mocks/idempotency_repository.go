// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	notification "github.com/goto/siren/core/notification"
	mock "github.com/stretchr/testify/mock"
)

// IdempotencyRepository is an autogenerated mock type for the IdempotencyRepository type
type IdempotencyRepository struct {
	mock.Mock
}

type IdempotencyRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *IdempotencyRepository) EXPECT() *IdempotencyRepository_Expecter {
	return &IdempotencyRepository_Expecter{mock: &_m.Mock}
}

// Check provides a mock function with given fields: ctx, scope, key
func (_m *IdempotencyRepository) Check(ctx context.Context, scope string, key string) (*notification.Idempotency, error) {
	ret := _m.Called(ctx, scope, key)

	if len(ret) == 0 {
		panic("no return value specified for Check")
	}

	var r0 *notification.Idempotency
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*notification.Idempotency, error)); ok {
		return rf(ctx, scope, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *notification.Idempotency); ok {
		r0 = rf(ctx, scope, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*notification.Idempotency)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, scope, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IdempotencyRepository_Check_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Check'
type IdempotencyRepository_Check_Call struct {
	*mock.Call
}

// Check is a helper method to define mock.On call
//   - ctx context.Context
//   - scope string
//   - key string
func (_e *IdempotencyRepository_Expecter) Check(ctx interface{}, scope interface{}, key interface{}) *IdempotencyRepository_Check_Call {
	return &IdempotencyRepository_Check_Call{Call: _e.mock.On("Check", ctx, scope, key)}
}

func (_c *IdempotencyRepository_Check_Call) Run(run func(ctx context.Context, scope string, key string)) *IdempotencyRepository_Check_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *IdempotencyRepository_Check_Call) Return(_a0 *notification.Idempotency, _a1 error) *IdempotencyRepository_Check_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IdempotencyRepository_Check_Call) RunAndReturn(run func(context.Context, string, string) (*notification.Idempotency, error)) *IdempotencyRepository_Check_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, scope, key, notificationID
func (_m *IdempotencyRepository) Create(ctx context.Context, scope string, key string, notificationID string) (*notification.Idempotency, error) {
	ret := _m.Called(ctx, scope, key, notificationID)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *notification.Idempotency
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*notification.Idempotency, error)); ok {
		return rf(ctx, scope, key, notificationID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *notification.Idempotency); ok {
		r0 = rf(ctx, scope, key, notificationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*notification.Idempotency)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, scope, key, notificationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IdempotencyRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type IdempotencyRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - scope string
//   - key string
//   - notificationID string
func (_e *IdempotencyRepository_Expecter) Create(ctx interface{}, scope interface{}, key interface{}, notificationID interface{}) *IdempotencyRepository_Create_Call {
	return &IdempotencyRepository_Create_Call{Call: _e.mock.On("Create", ctx, scope, key, notificationID)}
}

func (_c *IdempotencyRepository_Create_Call) Run(run func(ctx context.Context, scope string, key string, notificationID string)) *IdempotencyRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *IdempotencyRepository_Create_Call) Return(_a0 *notification.Idempotency, _a1 error) *IdempotencyRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IdempotencyRepository_Create_Call) RunAndReturn(run func(context.Context, string, string, string) (*notification.Idempotency, error)) *IdempotencyRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *IdempotencyRepository) Delete(_a0 context.Context, _a1 notification.IdempotencyFilter) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, notification.IdempotencyFilter) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IdempotencyRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type IdempotencyRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 notification.IdempotencyFilter
func (_e *IdempotencyRepository_Expecter) Delete(_a0 interface{}, _a1 interface{}) *IdempotencyRepository_Delete_Call {
	return &IdempotencyRepository_Delete_Call{Call: _e.mock.On("Delete", _a0, _a1)}
}

func (_c *IdempotencyRepository_Delete_Call) Run(run func(_a0 context.Context, _a1 notification.IdempotencyFilter)) *IdempotencyRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(notification.IdempotencyFilter))
	})
	return _c
}

func (_c *IdempotencyRepository_Delete_Call) Return(_a0 error) *IdempotencyRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IdempotencyRepository_Delete_Call) RunAndReturn(run func(context.Context, notification.IdempotencyFilter) error) *IdempotencyRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// NewIdempotencyRepository creates a new instance of IdempotencyRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIdempotencyRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IdempotencyRepository {
	mock := &IdempotencyRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
