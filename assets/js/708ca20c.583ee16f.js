(self.webpackChunksiren=self.webpackChunksiren||[]).push([[898],{1410:(e,t,a)=>{const r=a(7694),n=a(3618);e.exports={title:"Siren",tagline:"Universal data observability toolkit",url:"https://odpf.github.io",baseUrl:"/siren/",onBrokenLinks:"throw",onBrokenMarkdownLinks:"warn",favicon:"img/favicon.ico",organizationName:"odpf",projectName:"siren",customFields:{apiVersion:"v1beta1",defaultHost:"http://localhost:8080"},presets:[["@docusaurus/preset-classic",{docs:{sidebarPath:6679,editUrl:"https://github.com/odpf/siren/edit/master/docs/",sidebarCollapsed:!0,breadcrumbs:!1},blog:!1,theme:{customCss:[5308,2295]},gtag:{trackingID:"G-EPXDLH6V72"}}]],themeConfig:{colorMode:{defaultMode:"light",respectPrefersColorScheme:!0},navbar:{title:"Siren",logo:{src:"img/logo.svg"},hideOnScroll:!0,items:[{type:"doc",docId:"introduction",position:"right",label:"Docs"},{to:"docs/support",label:"Support",position:"right"},{href:"https://bit.ly/2RzPbtn",position:"right",className:"header-slack-link"},{href:"https://github.com/odpf/siren",className:"navbar-item-github",position:"right"}]},footer:{style:"light",links:[]},prism:{theme:r,darkTheme:n},announcementBar:{id:"star-repo",content:'\u2b50\ufe0f If you like Siren, give it a star on <a target="_blank" rel="noopener noreferrer" href="https://github.com/odpf/siren">GitHub</a>! \u2b50',backgroundColor:"#222",textColor:"#eee",isCloseable:!0}}}},5162:(e,t,a)=>{"use strict";a.d(t,{Z:()=>o});var r=a(7294),n=a(4334);const l="tabItem_Ymn6";function o(e){let{children:t,hidden:a,className:o}=e;return r.createElement("div",{role:"tabpanel",className:(0,n.Z)(l,o),hidden:a},t)}},5488:(e,t,a)=>{"use strict";a.d(t,{Z:()=>m});var r=a(3117),n=a(7294),l=a(4334),o=a(2389),s=a(7392),i=a(7094),d=a(2466);const p="tabList__CuJ",c="tabItem_LNqP";function u(e){var t;const{lazy:a,block:o,defaultValue:u,values:m,groupId:g,className:b}=e,k=n.Children.map(e.children,(e=>{if((0,n.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),v=m??k.map((e=>{let{props:{value:t,label:a,attributes:r}}=e;return{value:t,label:a,attributes:r}})),h=(0,s.l)(v,((e,t)=>e.value===t.value));if(h.length>0)throw new Error(`Docusaurus error: Duplicate values "${h.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===u?u:u??(null==(t=k.find((e=>e.props.default)))?void 0:t.props.value)??k[0].props.value;if(null!==y&&!v.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${v.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:T,setTabGroupChoices:N}=(0,i.U)(),[f,x]=(0,n.useState)(y),Z=[],{blockElementScrollPositionUntilNextRender:_}=(0,d.o5)();if(null!=g){const e=T[g];null!=e&&e!==f&&v.some((t=>t.value===e))&&x(e)}const I=e=>{const t=e.currentTarget,a=Z.indexOf(t),r=v[a].value;r!==f&&(_(t),x(r),null!=g&&N(g,String(r)))},w=e=>{var t;let a=null;switch(e.key){case"Enter":I(e);break;case"ArrowRight":{const t=Z.indexOf(e.currentTarget)+1;a=Z[t]??Z[0];break}case"ArrowLeft":{const t=Z.indexOf(e.currentTarget)-1;a=Z[t]??Z[Z.length-1];break}}null==(t=a)||t.focus()};return n.createElement("div",{className:(0,l.Z)("tabs-container",p)},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":o},b)},v.map((e=>{let{value:t,label:a,attributes:o}=e;return n.createElement("li",(0,r.Z)({role:"tab",tabIndex:f===t?0:-1,"aria-selected":f===t,key:t,ref:e=>Z.push(e),onKeyDown:w,onClick:I},o,{className:(0,l.Z)("tabs__item",c,null==o?void 0:o.className,{"tabs__item--active":f===t})}),a??t)}))),a?(0,n.cloneElement)(k.filter((e=>e.props.value===f))[0],{className:"margin-top--md"}):n.createElement("div",{className:"margin-top--md"},k.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==f})))))}function m(e){const t=(0,o.Z)();return n.createElement(u,(0,r.Z)({key:String(t)},e))}},6679:e=>{e.exports={docsSidebar:["introduction","use_cases","installation",{type:"category",label:"Tour",items:["tour/introduction","tour/setup_server","tour/1sending_notifications_overview","tour/2alerting_rules_subscriptions_overview"]},{type:"category",label:"Concepts",items:["concepts/overview","concepts/plugin","concepts/notification","concepts/glossary"]},{type:"category",label:"Guides",items:["guides/overview","guides/deployment","guides/provider_and_namespace","guides/receiver","guides/subscription","guides/rule","guides/template","guides/alert_history","guides/notification","guides/workers","guides/job"]},{type:"category",label:"Providers",items:["providers/cortexmetrics"]},{type:"category",label:"Receivers",items:["receivers/slack","receivers/pagerduty","receivers/http","receivers/file"]},{type:"category",label:"Reference",items:["reference/api","reference/server_configuration","reference/client_configuration","reference/cli"]},{type:"category",label:"Extend",items:["extend/adding_new_provider","extend/adding_new_receiver"]},{type:"category",label:"Contribute",items:["contribute/contribution","contribute/release"]}]}},8698:(e,t,a)=>{"use strict";a.r(t),a.d(t,{apiVersion:()=>b,assets:()=>m,contentTitle:()=>c,default:()=>h,defaultHost:()=>k,frontMatter:()=>p,metadata:()=>u,toc:()=>g});var r=a(3117),n=(a(7294),a(3905)),l=a(5488),o=a(5162),s=a(6066),i=a(1410),d=a.n(i);const p={},c="Provider and Namespace",u={unversionedId:"guides/provider_and_namespace",id:"guides/provider_and_namespace",title:"Provider and Namespace",description:"Siren provider represents a monitoring server. We define alerts and alerts routing configuration inside providers. For example the below provider, describes how a cortex monitoring server info is stored inside Siren.",source:"@site/docs/guides/provider_and_namespace.md",sourceDirName:"guides",slug:"/guides/provider_and_namespace",permalink:"/siren/docs/guides/provider_and_namespace",draft:!1,editUrl:"https://github.com/odpf/siren/edit/master/docs/docs/guides/provider_and_namespace.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Server Installation",permalink:"/siren/docs/guides/deployment"},next:{title:"Receiver",permalink:"/siren/docs/guides/receiver"}},m={},g=[{value:"Provider",id:"provider",level:2},{value:"Provider creation",id:"provider-creation",level:3},{value:"Provider update",id:"provider-update",level:3},{value:"Getting a provider",id:"getting-a-provider",level:3},{value:"Getting all providers",id:"getting-all-providers",level:3},{value:"Deleting a provider",id:"deleting-a-provider",level:3},{value:"Namespace",id:"namespace",level:2},{value:"Creating a namespace",id:"creating-a-namespace",level:3},{value:"Updating a namespace",id:"updating-a-namespace",level:3},{value:"Getting a namespace",id:"getting-a-namespace",level:3},{value:"Getting all namespaces",id:"getting-all-namespaces",level:3},{value:"Deleting a namespace",id:"deleting-a-namespace",level:3}],b=d().customFields.apiVersion,k=d().customFields.defaultHost,v={toc:g,apiVersion:b};function h(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},v,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"provider-and-namespace"},"Provider and Namespace"),(0,n.kt)("p",null,"Siren provider represents a monitoring server. We define alerts and alerts routing configuration inside providers. For example the below provider, describes how a cortex monitoring server info is stored inside Siren."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-json"},'# provider\n{\n  "id": "3",\n  "host": "http://localhost:9009",\n  "urn": "localhost_cortex",\n  "name": "localhost_cortex",\n  "type": "cortex",\n  "credentials": {},\n  "created_at": "2021-10-26T06:00:52.627917Z",\n  "updated_at": "2021-10-26T06:00:52.627917Z"\n}\n')),(0,n.kt)("p",null,"Monitoring providers usually have tenants, a sharded way of storing and querying telemetry data. Siren calls them ",(0,n.kt)("strong",{parentName:"p"},"namespaces"),'. You should create a namespaces with the same name as the tenant of your monitoring providers. Example: the below namespace represent the tenant "odpf".'),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-json"},'# namespace\n{\n  "id": "10",\n  "urn": "odpf",\n  "name": "odpf",\n  "provider": {\n    "id": 3\n  },\n  "credentials": {},\n  "created_at": "2021-10-26T06:00:52.627917Z",\n  "updated_at": "2021-10-26T06:00:52.627917Z"\n}\n')),(0,n.kt)("h2",{id:"provider"},"Provider"),(0,n.kt)("h3",{id:"provider-creation"},"Provider creation"),(0,n.kt)(l.Z,{groupId:"api",mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"$ siren provider create --file provider.yaml\n"))),(0,n.kt)(o.Z,{value:"http",label:"HTTP",mdxType:"TabItem"},(0,n.kt)(s.Z,{className:"language-bash",mdxType:"CodeBlock"},"$ curl --request POST\n  --url ",k,"/",b,'/providers\n  --header \'content-type: application/json\'\n  --data-raw \'{\n  "host": "http://localhost:9009",\n  "urn": "localhost_cortex",\n  "name": "localhost_cortex",\n  "type": "cortex",\n  "credentials": {},\n  "labels": {}\n}\''))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Terminology of the request body")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Term"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"),(0,n.kt)("th",{parentName:"tr",align:null},"Example"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"host"),(0,n.kt)("td",{parentName:"tr",align:null},"Fully qualified path for the provider"),(0,n.kt)("td",{parentName:"tr",align:null},"http://localhost:9009")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"urn"),(0,n.kt)("td",{parentName:"tr",align:null},"Unique name for this provider (uneditable)"),(0,n.kt)("td",{parentName:"tr",align:null},"localhost_cortex")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"name"),(0,n.kt)("td",{parentName:"tr",align:null},"Name of the proider (editable)"),(0,n.kt)("td",{parentName:"tr",align:null},"localhost_cortex")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"type"),(0,n.kt)("td",{parentName:"tr",align:null},"type of the provider(cortex/influx etc.)"),(0,n.kt)("td",{parentName:"tr",align:null},"cortex")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"credentials"),(0,n.kt)("td",{parentName:"tr",align:null},"key value pair to be used for authentication with the host"),(0,n.kt)("td",{parentName:"tr",align:null},'{"bearer_token":"x2y4rd5"}')),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"labels"),(0,n.kt)("td",{parentName:"tr",align:null},"key value pair that can be used as label selector"),(0,n.kt)("td",{parentName:"tr",align:null},'{"environment":"dev"}')))),(0,n.kt)("p",null,"The response body will look like this:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "id": "1",\n  "host": "http://localhost:9009",\n  "urn": "localhost_cortex",\n  "name": "localhost_cortex",\n  "type": "cortex",\n  "credentials": {},\n  "created_at": "2022-01-03T05:10:47.880209Z",\n  "updated_at": "2022-01-03T05:10:47.880209Z"\n}\n')),(0,n.kt)("h3",{id:"provider-update"},"Provider update"),(0,n.kt)(l.Z,{groupId:"api",mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"$ siren provider edit --id 4 --file provider.yaml\n"))),(0,n.kt)(o.Z,{value:"http",label:"HTTP",mdxType:"TabItem"},(0,n.kt)(s.Z,{className:"language-bash",mdxType:"CodeBlock"},"$ curl --request PUT\n  --url ",k,"/",b,'/providers\n  --header \'content-type: application/json\'\n  --data-raw \'{\n  "host": "http://localhost:9009",\n  "urn": "localhost_cortex",\n  "name": "localhost_cortex_1",\n  "type": "cortex",\n  "credentials": {},\n  "labels": {}\n}\''))),(0,n.kt)("h3",{id:"getting-a-provider"},"Getting a provider"),(0,n.kt)(l.Z,{groupId:"api",mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"$ siren provider view 1\n"))),(0,n.kt)(o.Z,{value:"http",label:"HTTP",mdxType:"TabItem"},(0,n.kt)(s.Z,{className:"language-bash",mdxType:"CodeBlock"},"$ curl --request GET --url ",k,"/",b,"/providers/1"))),(0,n.kt)("h3",{id:"getting-all-providers"},"Getting all providers"),(0,n.kt)(l.Z,{groupId:"api",mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"$ siren provider list\n"))),(0,n.kt)(o.Z,{value:"http",label:"HTTP",mdxType:"TabItem"},(0,n.kt)(s.Z,{className:"language-bash",mdxType:"CodeBlock"},"$ curl --request GET --url ",k,"/",b,"/providers"))),(0,n.kt)("h3",{id:"deleting-a-provider"},"Deleting a provider"),(0,n.kt)(l.Z,{groupId:"api",mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"$ siren provider delete 4\n"))),(0,n.kt)(o.Z,{value:"http",label:"HTTP",mdxType:"TabItem"},(0,n.kt)(s.Z,{className:"language-bash",mdxType:"CodeBlock"},"$ curl --request DELETE --url ",k,"/",b,"/providers/4"))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Note:")),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Before deleting the provider, you will need to delete dependant resources (namespaces).")),(0,n.kt)("h2",{id:"namespace"},"Namespace"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Note:")," These operations on namespaces inside Siren doesn't affect the actual tenant in the monitoring provider. The user should manage the tenants themselves."),(0,n.kt)("h3",{id:"creating-a-namespace"},"Creating a namespace"),(0,n.kt)(l.Z,{groupId:"api",mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"$ siren namespace create --file namespace.yaml\n"))),(0,n.kt)(o.Z,{value:"http",label:"HTTP",mdxType:"TabItem"},(0,n.kt)(s.Z,{className:"language-bash",mdxType:"CodeBlock"},"$ curl --request POST\n  --url ",k,"/",b,'/namespaces\n  --header \'content-type: application/json\'\n  --data-raw \'{\n    "name": "test",\n    "urn": "test",\n    "provider": "5",\n    "credentials": {},\n    "labels": {}\n}\''))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Terminology of the request body")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Term"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"),(0,n.kt)("th",{parentName:"tr",align:null},"Example"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"urn"),(0,n.kt)("td",{parentName:"tr",align:null},"Unique name for this namespace (uneditable)"),(0,n.kt)("td",{parentName:"tr",align:null},"test-tenant")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"name"),(0,n.kt)("td",{parentName:"tr",align:null},"Name of the tenant (editable)"),(0,n.kt)("td",{parentName:"tr",align:null},"test-tenant")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"provider"),(0,n.kt)("td",{parentName:"tr",align:null},"id of the provider to which this tenant belongs"),(0,n.kt)("td",{parentName:"tr",align:null},"1")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"labels"),(0,n.kt)("td",{parentName:"tr",align:null},"key value pair that can be used as label selector"),(0,n.kt)("td",{parentName:"tr",align:null},'{"environment":"dev"}')),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"credentials"),(0,n.kt)("td",{parentName:"tr",align:null},"key value pair to be used for authentication with the host"),(0,n.kt)("td",{parentName:"tr",align:null},'{"bearer_token":"x2y4rd5"}')))),(0,n.kt)("p",null,"The response body will look like this:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "id": "13",\n  "urn": "test",\n  "name": "test",\n  "provider": "5",\n  "credentials": {},\n  "created_at": "2022-01-03T07:06:30.884113Z",\n  "updated_at": "2022-01-03T07:06:30.884113Z"\n}\n')),(0,n.kt)("h3",{id:"updating-a-namespace"},"Updating a namespace"),(0,n.kt)(l.Z,{groupId:"api",mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"$ siren namespace edit --id 13 --file namespace.yaml\n"))),(0,n.kt)(o.Z,{value:"http",label:"HTTP",mdxType:"TabItem"},(0,n.kt)(s.Z,{className:"language-bash",mdxType:"CodeBlock"},"$ curl --request PUT\n  --url ",k,"/",b,'/namespaces/13\n  --header \'content-type: application/json\'\n  --data-raw \'{\n    "name": "test2",\n    "urn": "test",\n    "provider": "5",\n    "credentials": {},\n    "labels": {}\n}\''))),(0,n.kt)("h3",{id:"getting-a-namespace"},"Getting a namespace"),(0,n.kt)(l.Z,{groupId:"api",mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"$ siren namespace view 13\n"))),(0,n.kt)(o.Z,{value:"http",label:"HTTP",mdxType:"TabItem"},(0,n.kt)(s.Z,{className:"language-bash",mdxType:"CodeBlock"},"$ curl --request GET --url ",k,"/",b,"/namespaces/13"))),(0,n.kt)("h3",{id:"getting-all-namespaces"},"Getting all namespaces"),(0,n.kt)(l.Z,{groupId:"api",mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"$ siren namespace list\n"))),(0,n.kt)(o.Z,{value:"http",label:"HTTP",mdxType:"TabItem"},(0,n.kt)(s.Z,{className:"language-bash",mdxType:"CodeBlock"},"$ curl --request GET --url ",k,"/",b,"/namespaces"))),(0,n.kt)("h3",{id:"deleting-a-namespace"},"Deleting a namespace"),(0,n.kt)(l.Z,{groupId:"api",mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"$ siren namespace delete 13\n"))),(0,n.kt)(o.Z,{value:"http",label:"HTTP",mdxType:"TabItem"},(0,n.kt)(s.Z,{className:"language-bash",mdxType:"CodeBlock"},"$ curl --request DELETE --url ",k,"/",b,"/namespaces/13"))))}h.isMDXComponent=!0},3618:(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>r});const r={plain:{color:"#F8F8F2",backgroundColor:"#282A36"},styles:[{types:["prolog","constant","builtin"],style:{color:"rgb(189, 147, 249)"}},{types:["inserted","function"],style:{color:"rgb(80, 250, 123)"}},{types:["deleted"],style:{color:"rgb(255, 85, 85)"}},{types:["changed"],style:{color:"rgb(255, 184, 108)"}},{types:["punctuation","symbol"],style:{color:"rgb(248, 248, 242)"}},{types:["string","char","tag","selector"],style:{color:"rgb(255, 121, 198)"}},{types:["keyword","variable"],style:{color:"rgb(189, 147, 249)",fontStyle:"italic"}},{types:["comment"],style:{color:"rgb(98, 114, 164)"}},{types:["attr-name"],style:{color:"rgb(241, 250, 140)"}}]}},7694:(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>r});const r={plain:{color:"#393A34",backgroundColor:"#f6f8fa"},styles:[{types:["comment","prolog","doctype","cdata"],style:{color:"#999988",fontStyle:"italic"}},{types:["namespace"],style:{opacity:.7}},{types:["string","attr-value"],style:{color:"#e3116c"}},{types:["punctuation","operator"],style:{color:"#393A34"}},{types:["entity","url","symbol","number","boolean","variable","constant","property","regex","inserted"],style:{color:"#36acaa"}},{types:["atrule","keyword","attr-name","selector"],style:{color:"#00a4db"}},{types:["function","deleted","tag"],style:{color:"#d73a49"}},{types:["function-variable"],style:{color:"#6f42c1"}},{types:["tag","selector","keyword"],style:{color:"#00009f"}}]}}}]);