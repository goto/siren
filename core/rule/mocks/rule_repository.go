// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	context "context"

	rule "github.com/odpf/siren/core/rule"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// RuleRepository is an autogenerated mock type for the Repository type
type RuleRepository struct {
	mock.Mock
}

type RuleRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *RuleRepository) EXPECT() *RuleRepository_Expecter {
	return &RuleRepository_Expecter{mock: &_m.Mock}
}

// List provides a mock function with given fields: _a0, _a1
func (_m *RuleRepository) List(_a0 context.Context, _a1 rule.Filter) ([]rule.Rule, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []rule.Rule
	if rf, ok := ret.Get(0).(func(context.Context, rule.Filter) []rule.Rule); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]rule.Rule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, rule.Filter) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RuleRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type RuleRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 rule.Filter
func (_e *RuleRepository_Expecter) List(_a0 interface{}, _a1 interface{}) *RuleRepository_List_Call {
	return &RuleRepository_List_Call{Call: _e.mock.On("List", _a0, _a1)}
}

func (_c *RuleRepository_List_Call) Run(run func(_a0 context.Context, _a1 rule.Filter)) *RuleRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(rule.Filter))
	})
	return _c
}

func (_c *RuleRepository_List_Call) Return(_a0 []rule.Rule, _a1 error) *RuleRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpsertWithTx provides a mock function with given fields: _a0, _a1, _a2
func (_m *RuleRepository) UpsertWithTx(_a0 context.Context, _a1 *rule.Rule, _a2 func() error) (uint64, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(context.Context, *rule.Rule, func() error) uint64); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *rule.Rule, func() error) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RuleRepository_UpsertWithTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertWithTx'
type RuleRepository_UpsertWithTx_Call struct {
	*mock.Call
}

// UpsertWithTx is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *rule.Rule
//  - _a2 func() error
func (_e *RuleRepository_Expecter) UpsertWithTx(_a0 interface{}, _a1 interface{}, _a2 interface{}) *RuleRepository_UpsertWithTx_Call {
	return &RuleRepository_UpsertWithTx_Call{Call: _e.mock.On("UpsertWithTx", _a0, _a1, _a2)}
}

func (_c *RuleRepository_UpsertWithTx_Call) Run(run func(_a0 context.Context, _a1 *rule.Rule, _a2 func() error)) *RuleRepository_UpsertWithTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*rule.Rule), args[2].(func() error))
	})
	return _c
}

func (_c *RuleRepository_UpsertWithTx_Call) Return(_a0 uint64, _a1 error) *RuleRepository_UpsertWithTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// NewRuleRepository creates a new instance of RuleRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewRuleRepository(t testing.TB) *RuleRepository {
	mock := &RuleRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
