// Code generated by mockery v2.44.2. DO NOT EDIT.

package mocks

import (
	context "context"

	lark "github.com/goto/siren/plugins/receivers/lark"
	mock "github.com/stretchr/testify/mock"

	secret "github.com/goto/siren/pkg/secret"
)

// LarkCaller is an autogenerated mock type for the LarkCaller type
type LarkCaller struct {
	mock.Mock
}

type LarkCaller_Expecter struct {
	mock *mock.Mock
}

func (_m *LarkCaller) EXPECT() *LarkCaller_Expecter {
	return &LarkCaller_Expecter{mock: &_m.Mock}
}

// GetWorkspaceChannels provides a mock function with given fields: ctx, clientID, clientSecret
func (_m *LarkCaller) GetWorkspaceChannels(ctx context.Context, clientID secret.MaskableString, clientSecret secret.MaskableString) ([]lark.Channel, error) {
	ret := _m.Called(ctx, clientID, clientSecret)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspaceChannels")
	}

	var r0 []lark.Channel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, secret.MaskableString, secret.MaskableString) ([]lark.Channel, error)); ok {
		return rf(ctx, clientID, clientSecret)
	}
	if rf, ok := ret.Get(0).(func(context.Context, secret.MaskableString, secret.MaskableString) []lark.Channel); ok {
		r0 = rf(ctx, clientID, clientSecret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]lark.Channel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, secret.MaskableString, secret.MaskableString) error); ok {
		r1 = rf(ctx, clientID, clientSecret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LarkCaller_GetWorkspaceChannels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspaceChannels'
type LarkCaller_GetWorkspaceChannels_Call struct {
	*mock.Call
}

// GetWorkspaceChannels is a helper method to define mock.On call
//   - ctx context.Context
//   - clientID secret.MaskableString
//   - clientSecret secret.MaskableString
func (_e *LarkCaller_Expecter) GetWorkspaceChannels(ctx interface{}, clientID interface{}, clientSecret interface{}) *LarkCaller_GetWorkspaceChannels_Call {
	return &LarkCaller_GetWorkspaceChannels_Call{Call: _e.mock.On("GetWorkspaceChannels", ctx, clientID, clientSecret)}
}

func (_c *LarkCaller_GetWorkspaceChannels_Call) Run(run func(ctx context.Context, clientID secret.MaskableString, clientSecret secret.MaskableString)) *LarkCaller_GetWorkspaceChannels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(secret.MaskableString), args[2].(secret.MaskableString))
	})
	return _c
}

func (_c *LarkCaller_GetWorkspaceChannels_Call) Return(_a0 []lark.Channel, _a1 error) *LarkCaller_GetWorkspaceChannels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LarkCaller_GetWorkspaceChannels_Call) RunAndReturn(run func(context.Context, secret.MaskableString, secret.MaskableString) ([]lark.Channel, error)) *LarkCaller_GetWorkspaceChannels_Call {
	_c.Call.Return(run)
	return _c
}

// Notify provides a mock function with given fields: ctx, conf, message
func (_m *LarkCaller) Notify(ctx context.Context, conf lark.NotificationConfig, message lark.Message) error {
	ret := _m.Called(ctx, conf, message)

	if len(ret) == 0 {
		panic("no return value specified for Notify")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, lark.NotificationConfig, lark.Message) error); ok {
		r0 = rf(ctx, conf, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LarkCaller_Notify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Notify'
type LarkCaller_Notify_Call struct {
	*mock.Call
}

// Notify is a helper method to define mock.On call
//   - ctx context.Context
//   - conf lark.NotificationConfig
//   - message lark.Message
func (_e *LarkCaller_Expecter) Notify(ctx interface{}, conf interface{}, message interface{}) *LarkCaller_Notify_Call {
	return &LarkCaller_Notify_Call{Call: _e.mock.On("Notify", ctx, conf, message)}
}

func (_c *LarkCaller_Notify_Call) Run(run func(ctx context.Context, conf lark.NotificationConfig, message lark.Message)) *LarkCaller_Notify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(lark.NotificationConfig), args[2].(lark.Message))
	})
	return _c
}

func (_c *LarkCaller_Notify_Call) Return(_a0 error) *LarkCaller_Notify_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LarkCaller_Notify_Call) RunAndReturn(run func(context.Context, lark.NotificationConfig, lark.Message) error) *LarkCaller_Notify_Call {
	_c.Call.Return(run)
	return _c
}

// NewLarkCaller creates a new instance of LarkCaller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLarkCaller(t interface {
	mock.TestingT
	Cleanup(func())
}) *LarkCaller {
	mock := &LarkCaller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
