"use strict";(self.webpackChunksiren=self.webpackChunksiren||[]).push([[810],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(r),f=i,m=d["".concat(l,".").concat(f)]||d[f]||u[f]||o;return r?n.createElement(m,a(a({ref:t},p),{},{components:r})):n.createElement(m,a({ref:t},p))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var c=2;c<o;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},1480:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=r(3117),i=(r(7294),r(3905));const o={},a="Glossary",s={unversionedId:"concepts/glossary",id:"concepts/glossary",title:"Glossary",description:"Provider",source:"@site/docs/concepts/glossary.md",sourceDirName:"concepts",slug:"/concepts/glossary",permalink:"/siren/docs/concepts/glossary",draft:!1,editUrl:"https://github.com/odpf/siren/edit/master/docs/docs/concepts/glossary.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Notification",permalink:"/siren/docs/concepts/notification"},next:{title:"Overview",permalink:"/siren/docs/guides/overview"}},l={},c=[{value:"Provider",id:"provider",level:2},{value:"Namespace",id:"namespace",level:2},{value:"Receiver",id:"receiver",level:2},{value:"Rule",id:"rule",level:2},{value:"Template",id:"template",level:2},{value:"Subscription",id:"subscription",level:2},{value:"Notification",id:"notification",level:2},{value:"Alert History",id:"alert-history",level:2},{value:"Notification Vendor",id:"notification-vendor",level:2},{value:"Notification Message Payload",id:"notification-message-payload",level:2}],p={toc:c};function u(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"glossary"},"Glossary"),(0,i.kt)("h2",{id:"provider"},"Provider"),(0,i.kt)("p",null,"Monitoring and Alerting Provider. E.g. Cortexmetrics, Influx 2.0, Prometheus etc."),(0,i.kt)("h2",{id:"namespace"},"Namespace"),(0,i.kt)("p",null,"Used to represent multi-tenancy in a given provider. Cortex calls it a tenant, influx 2.0 calls it organization."),(0,i.kt)("h2",{id:"receiver"},"Receiver"),(0,i.kt)("p",null,"Receivers are alert routing and notification mediums. Examples: Slack, Pagerduty, HTTP POST Webhooks etc. They contain global level configs which enables clients to use this medium for alert routing or sending notifications."),(0,i.kt)("h2",{id:"rule"},"Rule"),(0,i.kt)("p",null,"Alerting rules that are set within a provider"),(0,i.kt)("h2",{id:"template"},"Template"),(0,i.kt)("p",null,"An abstraction of data in Siren that could make data definition reusable. Currently template can be used to define ",(0,i.kt)("a",{parentName:"p",href:"/siren/docs/guides/rule"},"rules")," and ",(0,i.kt)("a",{parentName:"p",href:"/siren/docs/guides/notification"},"notification's")," message body."),(0,i.kt)("h2",{id:"subscription"},"Subscription"),(0,i.kt)("p",null,"Using subscriptions one can get notified when a set of conditions are true on a triggered alert."),(0,i.kt)("h2",{id:"notification"},"Notification"),(0,i.kt)("p",null,"A message to be sent to the specific receivers. Notification could be sent directly to receivers or sent by matching subscription's labels."),(0,i.kt)("h2",{id:"alert-history"},"Alert History"),(0,i.kt)("p",null,"Triggered Alert History. Siren provides simple endpoints to accept alert trigger event from various alerting providers e.g. Prometheus Alertmanager, Kapacitor, Influx 2.0 etc."),(0,i.kt)("h2",{id:"notification-vendor"},"Notification Vendor"),(0,i.kt)("p",null,"External parties that has capability to communicates to the end-user with their own medium e.g. Slack, PagerDuty."),(0,i.kt)("h2",{id:"notification-message-payload"},"Notification Message Payload"),(0,i.kt)("p",null,"Notification Message Payload is the data that are being sent to the notification vendor in the format that meets notification vendor's contract."))}u.isMDXComponent=!0}}]);