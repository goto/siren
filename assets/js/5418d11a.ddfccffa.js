"use strict";(self.webpackChunksiren=self.webpackChunksiren||[]).push([[2556],{41267:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>g,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=i(58168),t=(i(96540),i(15680));const o={},a="Add a New Receiver Plugin",l={unversionedId:"extend/adding_new_receiver",id:"extend/adding_new_receiver",title:"Add a New Receiver Plugin",description:"Receiver plugin is being used to send notifications to the receiver. More details about the concept of receiver plugin can be found here.",source:"@site/docs/extend/adding_new_receiver.md",sourceDirName:"extend",slug:"/extend/adding_new_receiver",permalink:"/siren/docs/extend/adding_new_receiver",draft:!1,editUrl:"https://github.com/goto/siren/edit/master/docs/docs/extend/adding_new_receiver.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Add a New Provider Plugin",permalink:"/siren/docs/extend/adding_new_provider"},next:{title:"Contribution Process",permalink:"/siren/docs/contribute/contribution"}},g={},p=[{value:"Steps to Add a New Plugin",id:"steps-to-add-a-new-plugin",level:2},{value:"Example: Add a new plugin <code>file</code> receiver",id:"example-add-a-new-plugin-file-receiver",level:2},{value:"Defining Configurations",id:"defining-configurations",level:3},{value:"Implement interfaces",id:"implement-interfaces",level:3}],s={toc:p},d="wrapper";function c(e){let{components:n,...i}=e;return(0,t.yg)(d,(0,r.A)({},s,i,{components:n,mdxType:"MDXLayout"}),(0,t.yg)("h1",{id:"add-a-new-receiver-plugin"},"Add a New Receiver Plugin"),(0,t.yg)("p",null,"Receiver plugin is being used to send notifications to the receiver. More details about the concept of receiver plugin can be found ",(0,t.yg)("a",{parentName:"p",href:"/siren/docs/concepts/plugin#receiver-plugin"},"here"),"."),(0,t.yg)("h2",{id:"steps-to-add-a-new-plugin"},"Steps to Add a New Plugin"),(0,t.yg)("ol",null,(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("strong",{parentName:"p"},"Add a new package")),(0,t.yg)("p",{parentName:"li"},"A new plugin could be added as a new package under ",(0,t.yg)("inlineCode",{parentName:"p"},"plugins/providers/{new_plugin}"),". Package name should comply with golang standard naming. Ideally you might want to name the package with lower-case and without any ",(0,t.yg)("inlineCode",{parentName:"p"},"-")," or ",(0,t.yg)("inlineCode",{parentName:"p"},"_")," signs.")),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("strong",{parentName:"p"},"Defining Configurations")),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("strong",{parentName:"p"},"Define ",(0,t.yg)("inlineCode",{parentName:"strong"},"AppConfig"))," (Optional)"),(0,t.yg)("p",{parentName:"li"},"If there is a need to have a generic config for the receiver that is being loaded during start-up, you could add a new ",(0,t.yg)("inlineCode",{parentName:"p"},"AppConfig")," and assign the config to ",(0,t.yg)("inlineCode",{parentName:"p"},"plugins/receivers/config.go")," to expose it to the app-level config. Siren will recognize and read the config when starting up.")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("strong",{parentName:"p"},"Define ",(0,t.yg)("inlineCode",{parentName:"strong"},"ReceiverConfig"))),(0,t.yg)("p",{parentName:"li"},"For each receiver, there must be a specific config that is important to be used to send notifications. You need to add the information needed in ",(0,t.yg)("inlineCode",{parentName:"p"},"ReceiverConfig"),".")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("strong",{parentName:"p"},"Define ",(0,t.yg)("inlineCode",{parentName:"strong"},"SubscriptionConfig"))," (Optional)"),(0,t.yg)("p",{parentName:"li"},"It is also possible for a receiver to have different config in the receiver and subscription. For example, slack has a dedicated config called ",(0,t.yg)("inlineCode",{parentName:"p"},"channel_name")," in subscription to send notification only to a specific channel. In this case you need to define separate configurations: ",(0,t.yg)("inlineCode",{parentName:"p"},"ReceiverConfig")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"SubscriptionConfig"),".")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("strong",{parentName:"p"},"Define ",(0,t.yg)("inlineCode",{parentName:"strong"},"NotificationConfig"))),(0,t.yg)("p",{parentName:"li"},"You need to implement ",(0,t.yg)("inlineCode",{parentName:"p"},"NotificationConfig")," which is a placeholder to combine ",(0,t.yg)("inlineCode",{parentName:"p"},"ReceiverConfig")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"SubscriptionConfig")," (if any). Therefore ",(0,t.yg)("inlineCode",{parentName:"p"},"NotificationConfig")," should just embed ",(0,t.yg)("inlineCode",{parentName:"p"},"ReceiverConfig")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"SubscriptionConfig")," (if needed). You might also want to add more function to validate and transform the config to ",(0,t.yg)("inlineCode",{parentName:"p"},"map[string]any"),".")))),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("strong",{parentName:"p"},"Implement Interfaces")),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("strong",{parentName:"p"},"Implement PreHook methods")," (Optional)"),(0,t.yg)("p",{parentName:"li"},"You need to figure out whether there is a need to do pre-processing of receiver configuration before storing to the database or enqueueing to the queue. For some receivers, there is a need to do encryption or validation in pre-processing step, in this case you could implement ",(0,t.yg)("inlineCode",{parentName:"p"},"PreHookDBTransformConfigs")," to transform and validate configurations before storing it to the DB and ",(0,t.yg)("inlineCode",{parentName:"p"},"PreHookQueueTransformConfigs")," to transform and validate configurations before storing it to the queue.")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("strong",{parentName:"p"},"Implement PostHook methods")," (Optional)"),(0,t.yg)("p",{parentName:"li"},"If there is a need to transform back receiver's configurations (e.g. decrypting config), you need to implement ",(0,t.yg)("inlineCode",{parentName:"p"},"PostHookDBTransformConfigs")," or ",(0,t.yg)("inlineCode",{parentName:"p"},"PostHookQueueTransformConfigs")," to transform the config back for processing.")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("strong",{parentName:"p"},"Implement ",(0,t.yg)("inlineCode",{parentName:"strong"},"Send")," notification method")),(0,t.yg)("p",{parentName:"li"},"You need to implement ",(0,t.yg)("inlineCode",{parentName:"p"},"Send")," method to send notification message to the external notification vendor.")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("strong",{parentName:"p"},"Implement ",(0,t.yg)("inlineCode",{parentName:"strong"},"GetSystemDefaultTemplate")," method")),(0,t.yg)("p",{parentName:"li"},"Add a new default template for alert notification in ",(0,t.yg)("inlineCode",{parentName:"p"},"plugins/receivers/{type}/config/{template_file_name}.goyaml")," and return it inside the ",(0,t.yg)("inlineCode",{parentName:"p"},"GetSystemDefaultTemplate")," method. More details about it are ",(0,t.yg)("a",{parentName:"p",href:"/siren/docs/concepts/plugin#alert-notification-default-template"},"here"),".")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("strong",{parentName:"p"},"Implement ",(0,t.yg)("inlineCode",{parentName:"strong"},"BuildData")," method")," (Optional)"),(0,t.yg)("p",{parentName:"li"},"If Siren needs to return some additional post-processed data during Get and List Receivers (see ",(0,t.yg)("a",{parentName:"p",href:"/siren/docs/concepts/plugin#receiver-plugin"},"here")," for more context), you could implement ",(0,t.yg)("inlineCode",{parentName:"p"},"BuildData")," method."))))),(0,t.yg)("ol",{start:4},(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("strong",{parentName:"p"},"Integrate New Plugin with Siren")),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Define and add your new type of plugin inside ",(0,t.yg)("inlineCode",{parentName:"li"},"core/receivers/type.go"),"."),(0,t.yg)("li",{parentName:"ul"},"Initialize your plugin receiver service and add to the ",(0,t.yg)("inlineCode",{parentName:"li"},"ConfigResolver")," and ",(0,t.yg)("inlineCode",{parentName:"li"},"Notifier")," registries map in ",(0,t.yg)("inlineCode",{parentName:"li"},"cli/deps"),"."),(0,t.yg)("li",{parentName:"ul"},"To make sure notification handler and dlq handler process your new type, don't forget to add your new receiver type in notification message & dlq handler config or make it default to support all receiver types.")))),(0,t.yg)("h2",{id:"example-add-a-new-plugin-file-receiver"},"Example: Add a new plugin ",(0,t.yg)("inlineCode",{parentName:"h2"},"file")," receiver"),(0,t.yg)("p",null,"In this part, we will show how to add a new receiver plugin to send notifications to a local ",(0,t.yg)("inlineCode",{parentName:"p"},"file"),"."),(0,t.yg)("h3",{id:"defining-configurations"},"Defining Configurations"),(0,t.yg)("p",null,"To write a file, we need a ",(0,t.yg)("inlineCode",{parentName:"p"},"url")," of the file. This might be the only config that we needs. We also don't need to define ",(0,t.yg)("inlineCode",{parentName:"p"},"SubscriptionConfig")," since we don't need a specific config for the subscription."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-go"},'type ReceiverConfig struct {\n    URL string `mapstructure:"url"`\n}\n')),(0,t.yg)("p",null,"We define a ",(0,t.yg)("inlineCode",{parentName:"p"},"NotificationConfig")," which only embeds ",(0,t.yg)("inlineCode",{parentName:"p"},"ReceiverConfig"),". This is helpful to separate the concern for a specific use-cases in some plugins."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-go"},'type NotificationConfig struct {\n    ReceiverConfig `mapstructure:",squash"`\n}\n')),(0,t.yg)("p",null,"For ",(0,t.yg)("inlineCode",{parentName:"p"},"file")," type, we don't need an ",(0,t.yg)("inlineCode",{parentName:"p"},"AppConfig")," as for now. So we don't need to add one in ",(0,t.yg)("inlineCode",{parentName:"p"},"plugins/receivers/config.go"),"."),(0,t.yg)("p",null,"Now that we already have defined all configs needed, we needs to implement all methods of interfaces needed by defining a new ",(0,t.yg)("inlineCode",{parentName:"p"},"PluginService"),"."),(0,t.yg)("h3",{id:"implement-interfaces"},"Implement interfaces"),(0,t.yg)("p",null,"We need to create a new ",(0,t.yg)("inlineCode",{parentName:"p"},"Plugin")," and implement ",(0,t.yg)("inlineCode",{parentName:"p"},"ConfigResolver")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"Notifier"),". For ",(0,t.yg)("inlineCode",{parentName:"p"},"file")," receiver, we don't need to do encryption of configs before and after writing and reading from the DB as well as Queue. Therefore, we only needs to implement ",(0,t.yg)("inlineCode",{parentName:"p"},"PreHookDBTransformConfigs")," to validate the config before storing it to the DB and ",(0,t.yg)("inlineCode",{parentName:"p"},"PreHookDBTransformConfigs")," to validate the config before enqueueing it."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-go"},'// highlight-start\n\ntype PluginService struct {\n    base.UnimplementedService\n}\n\n// NewPluginService returns file receiver service struct. This service implement [receiver.Resolver] and [notification.Notifier] interface.\nfunc NewPluginService() *PluginService {\n    return &PluginService{}\n}\n\nfunc (s *PluginService) PreHookDBTransformConfigs(ctx context.Context, receiverConfigMap map[string]any) (map[string]any, error) {\n    receiverConfig := &ReceiverConfig{}\n    if err := mapstructure.Decode(receiverConfigMap, receiverConfig); err != nil {\n        return nil, fmt.Errorf("failed to transform configurations to receiver config: %w", err)\n    }\n\n    if err := receiverConfig.Validate(); err != nil {\n        return nil, errors.ErrInvalid.WithMsgf(err.Error())\n    }\n\n    return receiverConfig.AsMap(), nil\n}\n\nfunc (s *PluginService) PreHookTransformConfigs(ctx context.Context, notificationConfigMap map[string]any) (map[string]any, error) {\n    notificationConfig := &NotificationConfig{}\n    if err := mapstructure.Decode(notificationConfigMap, notificationConfig); err != nil {\n        return nil, fmt.Errorf("failed to transform configurations to slack notification config: %w", err)\n    }\n\n    if err := notificationConfig.Validate(); err != nil {\n        return nil, err\n    }\n\n    return notificationConfig.AsMap(), nil\n}\n// highlight-end\n')),(0,t.yg)("p",null,"Beside those 2 functions, we also need to add a function to send notifications (to write notifications to a file under ",(0,t.yg)("inlineCode",{parentName:"p"},"url"),")."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-go"},'type PluginService struct {\n    base.UnimplementedService\n}\n\nfunc NewPluginService() *PluginService {\n    return &PluginService{}\n}\n\nfunc (s *PluginService) PreHookDBTransformConfigs(ctx context.Context, receiverConfigMap map[string]any) (map[string]any, error) {\n    receiverConfig := &ReceiverConfig{}\n    if err := mapstructure.Decode(receiverConfigMap, receiverConfig); err != nil {\n        return nil, fmt.Errorf("failed to transform configurations to receiver config: %w", err)\n    }\n\n    if err := receiverConfig.Validate(); err != nil {\n        return nil, errors.ErrInvalid.WithMsgf(err.Error())\n    }\n\n    return receiverConfig.AsMap(), nil\n}\n\nfunc (s *PluginService) PreHookQueueTransformConfigs(ctx context.Context, notificationConfigMap map[string]any) (map[string]any, error) {\n    notificationConfig := &NotificationConfig{}\n    if err := mapstructure.Decode(notificationConfigMap, notificationConfig); err != nil {\n        return nil, fmt.Errorf("failed to transform configurations to slack notification config: %w", err)\n    }\n\n    if err := notificationConfig.Validate(); err != nil {\n        return nil, err\n    }\n\n    return notificationConfig.AsMap(), nil\n}\n\n// highlight-start\nfunc (s *PluginService) Send(ctx context.Context, notificationMessage notification.Message) (bool, error) {\n    notificationConfig := &NotificationConfig{}\n    if err := mapstructure.Decode(notificationMessage.Configs, notificationConfig); err != nil {\n        return false, err\n    }\n\n    bodyBytes, err := json.Marshal(notificationMessage.Details)\n    if err != nil {\n        return false, err\n    }\n\n    fileInstance, err := os.OpenFile(notificationConfig.URL, os.O_RDWR|os.O_CREATE|os.O_APPEND, 0777)\n    if err != nil {\n        return false, err\n    }\n\n    byteNewLine := []byte("\\n")\n    bodyBytes = append(bodyBytes, byteNewLine...)\n    _, err = fileInstance.Write(bodyBytes)\n    if err != nil {\n        return false, err\n    }\n\n    return false, nil\n}\n// highlight-end\n')))}c.isMDXComponent=!0}}]);