(self.webpackChunksiren=self.webpackChunksiren||[]).push([[323],{1410:function(e,t,r){const a=r(7694),n=r(3618);e.exports={title:"Siren",tagline:"Universal data observability toolkit",url:"https://odpf.github.io",baseUrl:"/siren/",onBrokenLinks:"throw",onBrokenMarkdownLinks:"warn",favicon:"img/favicon.ico",organizationName:"odpf",projectName:"siren",customFields:{apiVersion:"v1beta1",defaultHost:"http://localhost:8080"},presets:[["@docusaurus/preset-classic",{docs:{sidebarPath:6679,editUrl:"https://github.com/odpf/siren/edit/master/docs/",sidebarCollapsed:!0,breadcrumbs:!1},blog:!1,theme:{customCss:[5308,2295]},gtag:{trackingID:"G-EPXDLH6V72"}}]],themeConfig:{colorMode:{defaultMode:"light",respectPrefersColorScheme:!0},navbar:{title:"Siren",logo:{src:"img/logo.svg"},hideOnScroll:!0,items:[{type:"doc",docId:"introduction",position:"right",label:"Docs"},{to:"docs/support",label:"Support",position:"right"},{href:"https://bit.ly/2RzPbtn",position:"right",className:"header-slack-link"},{href:"https://github.com/odpf/siren",className:"navbar-item-github",position:"right"}]},footer:{style:"light",links:[]},prism:{theme:a,darkTheme:n},announcementBar:{id:"star-repo",content:'\u2b50\ufe0f If you like Siren, give it a star on <a target="_blank" rel="noopener noreferrer" href="https://github.com/odpf/siren">GitHub</a>! \u2b50',backgroundColor:"#222",textColor:"#eee",isCloseable:!0}}}},5162:function(e,t,r){"use strict";r.d(t,{Z:function(){return o}});var a=r(7294),n=r(4334),l="tabItem_Ymn6";function o(e){let{children:t,hidden:r,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,n.Z)(l,o),hidden:r},t)}},5488:function(e,t,r){"use strict";r.d(t,{Z:function(){return m}});var a=r(3117),n=r(7294),l=r(4334),o=r(2389),i=r(7392),s=r(7094),u=r(2466),c="tabList__CuJ",p="tabItem_LNqP";function d(e){var t;const{lazy:r,block:o,defaultValue:d,values:m,groupId:g,className:b}=e,f=n.Children.map(e.children,(e=>{if((0,n.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=m??f.map((e=>{let{props:{value:t,label:r,attributes:a}}=e;return{value:t,label:r,attributes:a}})),v=(0,i.l)(h,((e,t)=>e.value===t.value));if(v.length>0)throw new Error(`Docusaurus error: Duplicate values "${v.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===d?d:d??(null==(t=f.find((e=>e.props.default)))?void 0:t.props.value)??f[0].props.value;if(null!==y&&!h.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:k,setTabGroupChoices:C}=(0,s.U)(),[_,N]=(0,n.useState)(y),w=[],{blockElementScrollPositionUntilNextRender:T}=(0,u.o5)();if(null!=g){const e=k[g];null!=e&&e!==_&&h.some((t=>t.value===e))&&N(e)}const I=e=>{const t=e.currentTarget,r=w.indexOf(t),a=h[r].value;a!==_&&(T(t),N(a),null!=g&&C(g,String(a)))},x=e=>{var t;let r=null;switch(e.key){case"ArrowRight":{const t=w.indexOf(e.currentTarget)+1;r=w[t]??w[0];break}case"ArrowLeft":{const t=w.indexOf(e.currentTarget)-1;r=w[t]??w[w.length-1];break}}null==(t=r)||t.focus()};return n.createElement("div",{className:(0,l.Z)("tabs-container",c)},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":o},b)},h.map((e=>{let{value:t,label:r,attributes:o}=e;return n.createElement("li",(0,a.Z)({role:"tab",tabIndex:_===t?0:-1,"aria-selected":_===t,key:t,ref:e=>w.push(e),onKeyDown:x,onFocus:I,onClick:I},o,{className:(0,l.Z)("tabs__item",p,null==o?void 0:o.className,{"tabs__item--active":_===t})}),r??t)}))),r?(0,n.cloneElement)(f.filter((e=>e.props.value===_))[0],{className:"margin-top--md"}):n.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==_})))))}function m(e){const t=(0,o.Z)();return n.createElement(d,(0,a.Z)({key:String(t)},e))}},6679:function(e){e.exports={docsSidebar:["introduction",{type:"category",label:"Tour",items:["tour/introduction","tour/startup_siren_server","tour/registering_provider","tour/registering_receivers","tour/sending_notifications_to_receiver","tour/configuring_provider_alerting_rules","tour/subscribing_notifications"]},{type:"category",label:"Concepts",items:["concepts/overview","concepts/plugin","concepts/schema"]},{type:"category",label:"Guides",items:["guides/overview","guides/provider_and_namespace","guides/receiver","guides/subscription","guides/rule","guides/template","guides/alert_history","guides/notification","guides/deployment"]},{type:"category",label:"Contribute",items:["contribute/contribution","contribute/receiver","contribute/provider","contribute/release"]},{type:"category",label:"Reference",items:["reference/api","reference/server_configuration","reference/client_configuration","reference/receiver","reference/cli"]}]}},7175:function(e,t,r){"use strict";r.r(t),r.d(t,{apiVersion:function(){return b},assets:function(){return m},contentTitle:function(){return p},default:function(){return v},defaultHost:function(){return f},frontMatter:function(){return c},metadata:function(){return d},toc:function(){return g}});var a=r(3117),n=(r(7294),r(3905)),l=r(5488),o=r(5162),i=r(6066),s=r(1410),u=r.n(s);const c={},p="5 - Configuring Provider Alerting Rules",d={unversionedId:"tour/configuring_provider_alerting_rules",id:"tour/configuring_provider_alerting_rules",title:"5 - Configuring Provider Alerting Rules",description:"In this part we will create alerting rules for our Cortex monitoring provider. Rules in Siren relies on template for its abstraction. We need to create a rule's template first before uploading a rule.",source:"@site/docs/tour/5_configuring_provider_alerting_rules.md",sourceDirName:"tour",slug:"/tour/configuring_provider_alerting_rules",permalink:"/siren/docs/tour/configuring_provider_alerting_rules",draft:!1,editUrl:"https://github.com/odpf/siren/edit/master/docs/docs/tour/5_configuring_provider_alerting_rules.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"docsSidebar",previous:{title:"4 - Sending Notification to Receiver",permalink:"/siren/docs/tour/sending_notifications_to_receiver"},next:{title:"6 - Subscribing Notifications",permalink:"/siren/docs/tour/subscribing_notifications"}},m={},g=[{value:"Creating a Rule&#39;s Template",id:"creating-a-rules-template",level:2},{value:"Creating a Rule",id:"creating-a-rule",level:2}],b=u().customFields.apiVersion,f=u().customFields.defaultHost,h={toc:g,apiVersion:b};function v(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},h,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"5---configuring-provider-alerting-rules"},"5 - Configuring Provider Alerting Rules"),(0,n.kt)("p",null,"In this part we will create alerting rules for our Cortex monitoring provider. Rules in Siren relies on ",(0,n.kt)("a",{parentName:"p",href:"/siren/docs/guides/template"},"template")," for its abstraction. We need to create a rule's template first before uploading a rule."),(0,n.kt)("h2",{id:"creating-a-rules-template"},"Creating a Rule's Template"),(0,n.kt)("p",null,"For now, we will create a rule's template to monitor CPU usage. More details about template is ",(0,n.kt)("a",{parentName:"p",href:"/siren/docs/guides/template"},"here"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v2\ntype: template\nname: CPU\nbody:\n    - alert: CPUWarning\n      expr: avg by (host) (cpu_usage_user{cpu="cpu-total"}) > [[.warning]]\n      for: "[[.for]]"\n      labels:\n          severity: WARNING\n      annotations:\n          description: CPU has been above [[.warning]] for last [[.for]] {{ $labels.host }}\n    - alert: CPUCritical\n      expr: avg by (host) (cpu_usage_user{cpu="cpu-total"}) > [[.critical]]\n      for: "[[.for]]"\n      labels:\n          severity: CRITICAL\n      annotations:\n          description: CPU has been above [[.critical]] for last [[.for]] {{ $labels.host }}\nvariables:\n    - name: for\n      type: string\n      default: 10m\n      description: For eg 5m, 2h; Golang duration format\n    - name: warning\n      type: int\n      default: 80\n    - name: critical\n      type: int\n      default: 90\ntags:\n    - systems\n')),(0,n.kt)("p",null,"We named the template above as ",(0,n.kt)("inlineCode",{parentName:"p"},"CPU"),", the body in the template is the data that will be interpolated with variables and rendered. Notice that template body format is similar with ",(0,n.kt)("a",{parentName:"p",href:"https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/"},"Prometheus alerting rules"),". This is because Cortex uses the same rules as prometheus and Siren will translate the rendered rules to the Cortex alerting rules. Let's save the template above into a file called ",(0,n.kt)("inlineCode",{parentName:"p"},"cpu_template.yaml"),"."),(0,n.kt)("p",null,"Let's upload our template to Siren using Siren CLI."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"./siren template upload cpu_template.yaml\n")),(0,n.kt)(l.Z,{groupId:"api",mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"./siren template upload cpu_template.yaml\n")))),(0,n.kt)("p",null,"You could verify the newly created template."),(0,n.kt)(l.Z,{groupId:"api",mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"./siren template list\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"Showing 1 of 1 templates\n \nID      NAME    TAGS   \n1       CPU     systems\n\nFor details on a template, try: siren template view <name>\n"))),(0,n.kt)(o.Z,{value:"http",label:"HTTP",mdxType:"TabItem"},(0,n.kt)(i.Z,{className:"language-bash",mdxType:"CodeBlock"},"$ curl --request GET\n  --url ",f,"/",b,"/templates"))),(0,n.kt)("h2",{id:"creating-a-rule"},"Creating a Rule"),(0,n.kt)("p",null,"Now we already have a ",(0,n.kt)("inlineCode",{parentName:"p"},"CPU")," template, we can create a rule based on that template. Let's prepare a rule and save it in a file called ",(0,n.kt)("inlineCode",{parentName:"p"},"cpu_test.yaml"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v2\ntype: rule\nnamespace: odpf\nprovider: localhost-dev-cortex\nproviderNamespace: odpf-ns\nrules:\n    cpuGroup:\n        template: CPU\n        enabled: true\n        variables:\n            - name: for\n              value: 15m\n            - name: warning\n              value: 185\n            - name: critical\n              value: 195\n")),(0,n.kt)("p",null,"Above we defined a rule based on ",(0,n.kt)("inlineCode",{parentName:"p"},"CPU")," template for namespace urn ",(0,n.kt)("inlineCode",{parentName:"p"},"odpf-ns")," and provider urn ",(0,n.kt)("inlineCode",{parentName:"p"},"localhost-dev-cortex"),". The rule group name is ",(0,n.kt)("inlineCode",{parentName:"p"},"cpuGroup")," and there are also some variables to be assign to the template when the template is rendered."),(0,n.kt)("p",null,"Upload the rule with Siren CLI."),(0,n.kt)(l.Z,{groupId:"api",mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"./siren rule upload cpu_test.yaml\n")),(0,n.kt)("p",null,"If succeed, you will get this message."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"Upserted Rule\nID: 4\n")))),(0,n.kt)("p",null,"You could verify the created rules by getting the added rules from Cortex provider with cURL."),(0,n.kt)(l.Z,{groupId:"api",mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"http",label:"HTTP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"curl --location --request GET 'http://localhost:9009/api/v1/rules' \\\n--header 'X-Scope-OrgId: odpf-ns'\n")))),(0,n.kt)("p",null,"The response body should be in ",(0,n.kt)("inlineCode",{parentName:"p"},"yaml")," format and like this"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},'odpf:\n    - name: cpuGroup\n      rules:\n        - alert: CPUWarning\n          expr: avg by (host) (cpu_usage_user{cpu="cpu-total"}) > 185\n          for: 15m\n          labels:\n            severity: WARNING\n          annotations:\n            description: CPU has been above 185 for last 15m {{ $labels.host }}\n        - alert: CPUCritical\n          expr: avg by (host) (cpu_usage_user{cpu="cpu-total"}) > 195\n          for: 15m\n          labels:\n            severity: CRITICAL\n          annotations:\n            description: CPU has been above 195 for last 15m {{ $labels.host }}\n')))}v.isMDXComponent=!0},3618:function(e,t,r){"use strict";r.r(t);t.default={plain:{color:"#F8F8F2",backgroundColor:"#282A36"},styles:[{types:["prolog","constant","builtin"],style:{color:"rgb(189, 147, 249)"}},{types:["inserted","function"],style:{color:"rgb(80, 250, 123)"}},{types:["deleted"],style:{color:"rgb(255, 85, 85)"}},{types:["changed"],style:{color:"rgb(255, 184, 108)"}},{types:["punctuation","symbol"],style:{color:"rgb(248, 248, 242)"}},{types:["string","char","tag","selector"],style:{color:"rgb(255, 121, 198)"}},{types:["keyword","variable"],style:{color:"rgb(189, 147, 249)",fontStyle:"italic"}},{types:["comment"],style:{color:"rgb(98, 114, 164)"}},{types:["attr-name"],style:{color:"rgb(241, 250, 140)"}}]}},7694:function(e,t,r){"use strict";r.r(t);t.default={plain:{color:"#393A34",backgroundColor:"#f6f8fa"},styles:[{types:["comment","prolog","doctype","cdata"],style:{color:"#999988",fontStyle:"italic"}},{types:["namespace"],style:{opacity:.7}},{types:["string","attr-value"],style:{color:"#e3116c"}},{types:["punctuation","operator"],style:{color:"#393A34"}},{types:["entity","url","symbol","number","boolean","variable","constant","property","regex","inserted"],style:{color:"#36acaa"}},{types:["atrule","keyword","attr-name","selector"],style:{color:"#00a4db"}},{types:["function","deleted","tag"],style:{color:"#d73a49"}},{types:["function-variable"],style:{color:"#6f42c1"}},{types:["tag","selector","keyword"],style:{color:"#00009f"}}]}}}]);